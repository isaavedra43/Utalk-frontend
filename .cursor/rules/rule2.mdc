---
description:
üé® REGLAS PARA IA FRONTEND (Builder Exportado a React)
NO REEMPLAZAR COMPONENTES CREADOS CON BUILDER:

Los componentes existentes (vistas, formularios, botones, tabs, tablas) no deben eliminarse ni ser reemplazados por nuevos componentes gen√©ricos o diferentes.

Solo puedes agregar l√≥gica, props o funciones que permitan adaptarlos al backend real.

No alterar la estructura visual del Builder:

El dise√±o, layout, y organizaci√≥n de los componentes ya construidos se debe mantener exactamente igual.

Solo puedes mapear datos reales, agregar hooks, estados o handlers que los hagan funcionales.

Respetar la navegaci√≥n actual:

No debes cambiar rutas, paths, ni jerarqu√≠as de navegaci√≥n ya definidas.

Si necesitas agregar una nueva vista, se debe hacer sin afectar las existentes.

No usar mocks si ya existe el endpoint:

Si un componente a√∫n usa datos mock, debes conectar el endpoint real del backend, respetando el formato y la estructura de datos que espera el componente.

Ajustes finos solo si son necesarios para integrarse:

Puedes cambiar nombres de campos, tipos de dato, nombres de props o estructura de objetos solo si eso permite que el componente consuma correctamente los datos del backend.

No sobreescribas componentes funcionales:

Si un componente ya tiene l√≥gica de render, validaci√≥n o consumo de datos (aunque incompleto), no lo sobrescribas por uno nuevo.

üîí REGLAS DE SEGURIDAD Y COHERENCIA GLOBAL
Siempre analiza TODO el proyecto antes de ejecutar cambios:

No propongas cambios sin haber entendido la relaci√≥n completa entre front y back.

No inventes nuevas estructuras si ya existe una funcional:

No cambies modelos de datos solo por conveniencia.

Mant√©n compatibilidad bidireccional:

Toda sugerencia en frontend debe estar basada en la estructura exacta del backend.

Toda l√≥gica nueva en backend debe considerar lo que ya est√° hecho en frontend.

No rompas flujos funcionales por "simplificar":

Si algo ya funciona, no lo modifiques solo por reducir l√≠neas o ‚Äúoptimizar‚Äù.

Respeta todas las funciones existentes:

Si un componente tiene onSubmit, onChange, onClick, o validaciones ya creadas, con√©ctalo a lo nuevo sin borrar lo anterior.

üìå EXTRAS (Sugerencias y protecci√≥n)
Toda IA debe trabajar en funci√≥n de integrarse al sistema actual, no de reinventarlo.

Los nuevos m√≥dulos/componentes deben inspirarse en los que ya existen: nombres, estructuras, l√≥gica, para mantener la coherencia.

No repliques c√≥digo sin verificar si ya existe: busca primero si ya hay un componente que hace lo que necesitas y solo exti√©ndelo.

Documenta cada cambio que propongas: indica qu√© archivo tocaste, por qu√© y c√≥mo afecta a otros m√≥dulos.

Toda propuesta debe incluir pruebas funcionales: si propones una conexi√≥n, tambi√©n debes indicar c√≥mo probarla.
globs:
üé® REGLAS PARA IA FRONTEND (Builder Exportado a React)
NO REEMPLAZAR COMPONENTES CREADOS CON BUILDER:

Los componentes existentes (vistas, formularios, botones, tabs, tablas) no deben eliminarse ni ser reemplazados por nuevos componentes gen√©ricos o diferentes.

Solo puedes agregar l√≥gica, props o funciones que permitan adaptarlos al backend real.

No alterar la estructura visual del Builder:

El dise√±o, layout, y organizaci√≥n de los componentes ya construidos se debe mantener exactamente igual.

Solo puedes mapear datos reales, agregar hooks, estados o handlers que los hagan funcionales.

Respetar la navegaci√≥n actual:

No debes cambiar rutas, paths, ni jerarqu√≠as de navegaci√≥n ya definidas.

Si necesitas agregar una nueva vista, se debe hacer sin afectar las existentes.

No usar mocks si ya existe el endpoint:

Si un componente a√∫n usa datos mock, debes conectar el endpoint real del backend, respetando el formato y la estructura de datos que espera el componente.

Ajustes finos solo si son necesarios para integrarse:

Puedes cambiar nombres de campos, tipos de dato, nombres de props o estructura de objetos solo si eso permite que el componente consuma correctamente los datos del backend.

No sobreescribas componentes funcionales:

Si un componente ya tiene l√≥gica de render, validaci√≥n o consumo de datos (aunque incompleto), no lo sobrescribas por uno nuevo.

üîí REGLAS DE SEGURIDAD Y COHERENCIA GLOBAL
Siempre analiza TODO el proyecto antes de ejecutar cambios:

No propongas cambios sin haber entendido la relaci√≥n completa entre front y back.

No inventes nuevas estructuras si ya existe una funcional:

No cambies modelos de datos solo por conveniencia.

Mant√©n compatibilidad bidireccional:

Toda sugerencia en frontend debe estar basada en la estructura exacta del backend.

Toda l√≥gica nueva en backend debe considerar lo que ya est√° hecho en frontend.

No rompas flujos funcionales por "simplificar":

Si algo ya funciona, no lo modifiques solo por reducir l√≠neas o ‚Äúoptimizar‚Äù.

Respeta todas las funciones existentes:

Si un componente tiene onSubmit, onChange, onClick, o validaciones ya creadas, con√©ctalo a lo nuevo sin borrar lo anterior.

üìå EXTRAS (Sugerencias y protecci√≥n)
Toda IA debe trabajar en funci√≥n de integrarse al sistema actual, no de reinventarlo.

Los nuevos m√≥dulos/componentes deben inspirarse en los que ya existen: nombres, estructuras, l√≥gica, para mantener la coherencia.

No repliques c√≥digo sin verificar si ya existe: busca primero si ya hay un componente que hace lo que necesitas y solo exti√©ndelo.

Documenta cada cambio que propongas: indica qu√© archivo tocaste, por qu√© y c√≥mo afecta a otros m√≥dulos.

Toda propuesta debe incluir pruebas funcionales: si propones una conexi√≥n, tambi√©n debes indicar c√≥mo probarla.
alwaysApply: true
---
