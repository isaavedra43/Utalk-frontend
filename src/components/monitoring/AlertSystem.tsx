import React, { useState, useEffect, useMemo } from 'react';
import { useMonitoring } from './MonitoringContext';
import { 
  AlertTriangle, 
  AlertCircle, 
  CheckCircle, 
  XCircle, 
  Clock, 
  Zap,
  TrendingUp,
  TrendingDown,
  Bell,
  BellOff,
  Settings,
  Eye,
  EyeOff,
  Target,
  Activity
} from 'lucide-react';

interface Alert {
  id: string;
  type: 'error' | 'warning' | 'info' | 'success';
  title: string;
  message: string;
  timestamp: number;
  severity: 'low' | 'medium' | 'high' | 'critical';
  category: 'performance' | 'error' | 'security' | 'availability' | 'resource';
  source: string;
  acknowledged: boolean;
  autoGenerated: boolean;
  metadata?: any;
}

interface AlertRule {
  id: string;
  name: string;
  description: string;
  enabled: boolean;
  condition: string;
  threshold: number;
  severity: Alert['severity'];
  category: Alert['category'];
}

const DEFAULT_ALERT_RULES: AlertRule[] = [
  {
    id: 'high_error_rate',
    name: 'Alta Tasa de Errores',
    description: 'Se activa cuando la tasa de errores supera el 5%',
    enabled: true,
    condition: 'error_rate > threshold',
    threshold: 5,
    severity: 'high',
    category: 'error'
  },
  {
    id: 'slow_response_time',
    name: 'Tiempo de Respuesta Lento',
    description: 'Se activa cuando el tiempo promedio de respuesta supera los 2000ms',
    enabled: true,
    condition: 'avg_response_time > threshold',
    threshold: 2000,
    severity: 'medium',
    category: 'performance'
  },
  {
    id: 'high_memory_usage',
    name: 'Alto Uso de Memoria',
    description: 'Se activa cuando el uso de memoria supera el 80%',
    enabled: true,
    condition: 'memory_usage > threshold',
    threshold: 80,
    severity: 'medium',
    category: 'resource'
  },
  {
    id: 'websocket_disconnected',
    name: 'WebSocket Desconectado',
    description: 'Se activa cuando se detecta una desconexi칩n de WebSocket',
    enabled: true,
    condition: 'websocket_status === "disconnected"',
    threshold: 0,
    severity: 'high',
    category: 'availability'
  },
  {
    id: 'multiple_api_failures',
    name: 'M칰ltiples Fallas de API',
    description: 'Se activa cuando hay m치s de 10 fallas de API en 5 minutos',
    enabled: true,
    condition: 'api_failures_5min > threshold',
    threshold: 10,
    severity: 'critical',
    category: 'availability'
  }
];

export const AlertSystem: React.FC = () => {
  const { apis, websockets, errors, performance } = useMonitoring();
  const [alerts, setAlerts] = useState<Alert[]>([]);
  const [alertRules, setAlertRules] = useState<AlertRule[]>(DEFAULT_ALERT_RULES);
  const [showSettings, setShowSettings] = useState(false);
  const [filterType, setFilterType] = useState<'all' | Alert['type']>('all');
  const [filterSeverity, setFilterSeverity] = useState<'all' | Alert['severity']>('all');
  const [soundEnabled, setSoundEnabled] = useState(true);
  const [showAcknowledged, setShowAcknowledged] = useState(false);

  // Generar alertas basadas en reglas
  const generateAlerts = useMemo(() => {
    const now = Date.now();
    const fiveMinutesAgo = now - (5 * 60 * 1000);
    const oneHourAgo = now - (60 * 60 * 1000);
    
    const newAlerts: Alert[] = [];

    // Datos recientes para an치lisis
    const recentApis = apis.filter(api => api.timestamp > fiveMinutesAgo);
    const recentErrors = errors.filter(error => error.timestamp > fiveMinutesAgo);
    const recentWsEvents = websockets.filter(ws => ws.timestamp > fiveMinutesAgo);

    alertRules.forEach(rule => {
      if (!rule.enabled) return;

      let shouldAlert = false;
      let alertMessage = '';
      let alertMetadata = {};

      switch (rule.id) {
        case 'high_error_rate':
          if (recentApis.length > 0) {
            const errorCount = recentApis.filter(api => api.error || (api.status && api.status >= 400)).length;
            const errorRate = (errorCount / recentApis.length) * 100;
            if (errorRate > rule.threshold) {
              shouldAlert = true;
              alertMessage = `Tasa de errores: ${errorRate.toFixed(1)}% (${errorCount}/${recentApis.length} requests)`;
              alertMetadata = { errorRate, errorCount, totalRequests: recentApis.length };
            }
          }
          break;

        case 'slow_response_time':
          if (recentApis.length > 0) {
            const avgResponseTime = recentApis.reduce((sum, api) => sum + (api.duration || 0), 0) / recentApis.length;
            if (avgResponseTime > rule.threshold) {
              shouldAlert = true;
              alertMessage = `Tiempo promedio de respuesta: ${avgResponseTime.toFixed(0)}ms`;
              alertMetadata = { avgResponseTime, sampleSize: recentApis.length };
            }
          }
          break;

        case 'high_memory_usage':
          const memoryMetrics = performance.filter(p => p.type === 'memory' && p.timestamp > fiveMinutesAgo);
          if (memoryMetrics.length > 0) {
            const latestMemory = memoryMetrics[memoryMetrics.length - 1];
            const memoryUsagePercent = (latestMemory.value / (1024 * 1024 * 100)) * 100; // Assuming value is in bytes
            if (memoryUsagePercent > rule.threshold) {
              shouldAlert = true;
              alertMessage = `Uso de memoria: ${memoryUsagePercent.toFixed(1)}%`;
              alertMetadata = { memoryUsage: memoryUsagePercent };
            }
          }
          break;

        case 'websocket_disconnected':
          const hasDisconnect = recentWsEvents.some(ws => ws.type === 'disconnect');
          const hasRecentConnect = recentWsEvents.some(ws => ws.type === 'connect');
          if (hasDisconnect && !hasRecentConnect) {
            shouldAlert = true;
            alertMessage = 'WebSocket desconectado sin reconexi칩n reciente';
            alertMetadata = { lastDisconnect: recentWsEvents.find(ws => ws.type === 'disconnect')?.timestamp };
          }
          break;

        case 'multiple_api_failures':
          const apiFailures = recentApis.filter(api => api.error || (api.status && api.status >= 400)).length;
          if (apiFailures > rule.threshold) {
            shouldAlert = true;
            alertMessage = `${apiFailures} fallas de API en los 칰ltimos 5 minutos`;
            alertMetadata = { failureCount: apiFailures, timeWindow: '5min' };
          }
          break;
      }

      if (shouldAlert) {
        // Verificar si ya existe una alerta similar reciente (evitar spam)
        const existingAlert = alerts.find(alert => 
          alert.source === rule.id && 
          now - alert.timestamp < (10 * 60 * 1000) && // 칔ltimos 10 minutos
          !alert.acknowledged
        );

        if (!existingAlert) {
          newAlerts.push({
            id: `${rule.id}_${now}_${Math.random().toString(36).substr(2, 9)}`,
            type: rule.severity === 'critical' ? 'error' : rule.severity === 'high' ? 'error' : rule.severity === 'medium' ? 'warning' : 'info',
            title: rule.name,
            message: alertMessage,
            timestamp: now,
            severity: rule.severity,
            category: rule.category,
            source: rule.id,
            acknowledged: false,
            autoGenerated: true,
            metadata: alertMetadata
          });
        }
      }
    });

    return newAlerts;
  }, [apis, websockets, errors, performance, alertRules, alerts]);

  // Agregar nuevas alertas
  useEffect(() => {
    if (generateAlerts.length > 0) {
      setAlerts(prev => [...prev, ...generateAlerts].slice(-100)); // Mantener solo las 칰ltimas 100 alertas
      
      // Reproducir sonido si est치 habilitado
      if (soundEnabled && generateAlerts.some(alert => alert.severity === 'critical' || alert.severity === 'high')) {
        // Aqu칤 podr칤as agregar un sonido de alerta
        console.log('游뚿 Nueva alerta cr칤tica generada');
      }
    }
  }, [generateAlerts, soundEnabled]);

  // Filtrar alertas
  const filteredAlerts = useMemo(() => {
    return alerts.filter(alert => {
      if (!showAcknowledged && alert.acknowledged) return false;
      if (filterType !== 'all' && alert.type !== filterType) return false;
      if (filterSeverity !== 'all' && alert.severity !== filterSeverity) return false;
      return true;
    }).sort((a, b) => b.timestamp - a.timestamp);
  }, [alerts, showAcknowledged, filterType, filterSeverity]);

  const acknowledgeAlert = (alertId: string) => {
    setAlerts(prev => prev.map(alert => 
      alert.id === alertId ? { ...alert, acknowledged: true } : alert
    ));
  };

  const dismissAlert = (alertId: string) => {
    setAlerts(prev => prev.filter(alert => alert.id !== alertId));
  };

  const toggleRule = (ruleId: string) => {
    setAlertRules(prev => prev.map(rule => 
      rule.id === ruleId ? { ...rule, enabled: !rule.enabled } : rule
    ));
  };

  const updateRuleThreshold = (ruleId: string, threshold: number) => {
    setAlertRules(prev => prev.map(rule => 
      rule.id === ruleId ? { ...rule, threshold } : rule
    ));
  };

  const getAlertIcon = (type: Alert['type']) => {
    switch (type) {
      case 'error': return <XCircle className="w-5 h-5 text-red-500" />;
      case 'warning': return <AlertTriangle className="w-5 h-5 text-yellow-500" />;
      case 'info': return <AlertCircle className="w-5 h-5 text-blue-500" />;
      case 'success': return <CheckCircle className="w-5 h-5 text-green-500" />;
    }
  };

  const getSeverityColor = (severity: Alert['severity']) => {
    switch (severity) {
      case 'critical': return 'border-red-600 bg-red-50';
      case 'high': return 'border-red-400 bg-red-50';
      case 'medium': return 'border-yellow-400 bg-yellow-50';
      case 'low': return 'border-blue-400 bg-blue-50';
    }
  };

  const formatTimestamp = (timestamp: number) => {
    return new Date(timestamp).toLocaleString();
  };

  // Estad칤sticas de alertas
  const alertStats = useMemo(() => {
    const last24h = alerts.filter(alert => Date.now() - alert.timestamp < 24 * 60 * 60 * 1000);
    return {
      total: alerts.length,
      unacknowledged: alerts.filter(alert => !alert.acknowledged).length,
      critical: last24h.filter(alert => alert.severity === 'critical').length,
      high: last24h.filter(alert => alert.severity === 'high').length,
      medium: last24h.filter(alert => alert.severity === 'medium').length,
      low: last24h.filter(alert => alert.severity === 'low').length
    };
  }, [alerts]);

  return (
    <div className="alert-system-container">
      {/* Header con estad칤sticas */}
      <div className="alert-header">
        <div className="alert-stats">
          <div className="stat-item">
            <Bell className="w-4 h-4 text-blue-500" />
            <span>Total: {alertStats.total}</span>
          </div>
          <div className="stat-item">
            <AlertTriangle className="w-4 h-4 text-red-500" />
            <span>Sin reconocer: {alertStats.unacknowledged}</span>
          </div>
          <div className="stat-item critical">
            <span>Cr칤ticas: {alertStats.critical}</span>
          </div>
          <div className="stat-item high">
            <span>Altas: {alertStats.high}</span>
          </div>
          <div className="stat-item medium">
            <span>Medias: {alertStats.medium}</span>
          </div>
        </div>
        
        <div className="alert-controls">
          <button
            onClick={() => setSoundEnabled(!soundEnabled)}
            className={`control-btn ${soundEnabled ? 'active' : ''}`}
            title={soundEnabled ? 'Deshabilitar sonido' : 'Habilitar sonido'}
          >
            {soundEnabled ? <Bell className="w-4 h-4" /> : <BellOff className="w-4 h-4" />}
          </button>
          <button
            onClick={() => setShowAcknowledged(!showAcknowledged)}
            className={`control-btn ${showAcknowledged ? 'active' : ''}`}
            title={showAcknowledged ? 'Ocultar reconocidas' : 'Mostrar reconocidas'}
          >
            {showAcknowledged ? <Eye className="w-4 h-4" /> : <EyeOff className="w-4 h-4" />}
          </button>
          <button
            onClick={() => setShowSettings(!showSettings)}
            className={`control-btn ${showSettings ? 'active' : ''}`}
            title="Configurar reglas de alerta"
          >
            <Settings className="w-4 h-4" />
          </button>
        </div>
      </div>

      {/* Filtros */}
      <div className="alert-filters">
        <select 
          value={filterType} 
          onChange={(e) => setFilterType(e.target.value as any)}
          className="filter-select"
        >
          <option value="all">Todos los tipos</option>
          <option value="error">Errores</option>
          <option value="warning">Advertencias</option>
          <option value="info">Informaci칩n</option>
          <option value="success">칄xito</option>
        </select>
        
        <select 
          value={filterSeverity} 
          onChange={(e) => setFilterSeverity(e.target.value as any)}
          className="filter-select"
        >
          <option value="all">Todas las severidades</option>
          <option value="critical">Cr칤tica</option>
          <option value="high">Alta</option>
          <option value="medium">Media</option>
          <option value="low">Baja</option>
        </select>
      </div>

      {/* Panel de configuraci칩n */}
      {showSettings && (
        <div className="alert-settings">
          <h3>Configuraci칩n de Reglas de Alerta</h3>
          <div className="rules-list">
            {alertRules.map(rule => (
              <div key={rule.id} className="rule-item">
                <div className="rule-header">
                  <div className="rule-info">
                    <label className="rule-toggle">
                      <input
                        type="checkbox"
                        checked={rule.enabled}
                        onChange={() => toggleRule(rule.id)}
                      />
                      <span className="rule-name">{rule.name}</span>
                    </label>
                    <p className="rule-description">{rule.description}</p>
                  </div>
                  <div className="rule-controls">
                    <label className="threshold-label">
                      Umbral:
                      <input
                        type="number"
                        value={rule.threshold}
                        onChange={(e) => updateRuleThreshold(rule.id, Number(e.target.value))}
                        className="threshold-input"
                        min="0"
                        step={rule.id === 'high_error_rate' ? '0.1' : '1'}
                      />
                    </label>
                    <span className={`severity-badge ${rule.severity}`}>
                      {rule.severity.toUpperCase()}
                    </span>
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>
      )}

      {/* Lista de alertas */}
      <div className="alerts-list">
        {filteredAlerts.length === 0 ? (
          <div className="no-alerts">
            <CheckCircle className="w-12 h-12 text-green-400" />
            <h3>No hay alertas</h3>
            <p>Todo el sistema est치 funcionando correctamente.</p>
          </div>
        ) : (
          filteredAlerts.map(alert => (
            <div key={alert.id} className={`alert-item ${getSeverityColor(alert.severity)} ${alert.acknowledged ? 'acknowledged' : ''}`}>
              <div className="alert-content">
                <div className="alert-icon">
                  {getAlertIcon(alert.type)}
                </div>
                <div className="alert-details">
                  <div className="alert-title-row">
                    <h4 className="alert-title">{alert.title}</h4>
                    <div className="alert-badges">
                      <span className={`severity-badge ${alert.severity}`}>
                        {alert.severity.toUpperCase()}
                      </span>
                      <span className="category-badge">
                        {alert.category.toUpperCase()}
                      </span>
                      {alert.autoGenerated && (
                        <span className="auto-badge">AUTO</span>
                      )}
                    </div>
                  </div>
                  <p className="alert-message">{alert.message}</p>
                  <div className="alert-meta">
                    <span className="alert-time">
                      <Clock className="w-3 h-3" />
                      {formatTimestamp(alert.timestamp)}
                    </span>
                    <span className="alert-source">Fuente: {alert.source}</span>
                  </div>
                  {alert.metadata && (
                    <div className="alert-metadata">
                      <pre>{JSON.stringify(alert.metadata, null, 2)}</pre>
                    </div>
                  )}
                </div>
              </div>
              <div className="alert-actions">
                {!alert.acknowledged && (
                  <button
                    onClick={() => acknowledgeAlert(alert.id)}
                    className="action-btn acknowledge"
                    title="Reconocer alerta"
                  >
                    <CheckCircle className="w-4 h-4" />
                  </button>
                )}
                <button
                  onClick={() => dismissAlert(alert.id)}
                  className="action-btn dismiss"
                  title="Descartar alerta"
                >
                  <XCircle className="w-4 h-4" />
                </button>
              </div>
            </div>
          ))
        )}
      </div>
    </div>
  );
};
