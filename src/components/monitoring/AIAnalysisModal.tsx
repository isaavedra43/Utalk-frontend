import React, { useState } from 'react';
import { X, Brain, Download, Copy, RefreshCw, AlertTriangle, CheckCircle, Key, Loader2 } from 'lucide-react';
import { useMonitoring } from './MonitoringContext';
import { callOpenAI, setAPIKey } from '../../config/ai';

interface AIAnalysisModalProps {
  onClose: () => void;
}

interface AIAnalysisResult {
  summary: string;
  criticalIssues: string[];
  recommendations: string[];
  performanceInsights: string[];
  errorPatterns: string[];
  generatedAt: string;
  dataRange: string;
  totalItems: number;
}

export const AIAnalysisModal: React.FC<AIAnalysisModalProps> = ({ onClose }) => {
  const { apis, websockets, logs, errors, performance, states } = useMonitoring();
  const [isAnalyzing, setIsAnalyzing] = useState(false);
  const [analysisResult, setAnalysisResult] = useState<AIAnalysisResult | null>(null);
  const [error, setError] = useState<string | null>(null);

  const prepareDataForAnalysis = () => {
    const now = Date.now();
    const oneDayAgo = now - (24 * 60 * 60 * 1000);

    console.log('üîç DEBUG - Datos del store de monitoreo:');
    console.log('üìä APIs totales:', apis.length);
    console.log('üîå WebSockets totales:', websockets.length);
    console.log('üìù Logs totales:', logs.length);
    console.log('‚ùå Errores totales:', errors.length);
    console.log('‚ö° Performance totales:', performance.length);
    console.log('üîÑ States totales:', states.length);

    // Filtrar datos recientes
    const recentAPIs = apis.filter(api => api.timestamp >= oneDayAgo);
    const recentWebSockets = websockets.filter(ws => ws.timestamp >= oneDayAgo);
    const recentLogs = logs.filter(log => log.timestamp >= oneDayAgo);
    const recentErrors = errors.filter(error => error.timestamp >= oneDayAgo);
    const recentPerformance = performance.filter(perf => perf.timestamp >= oneDayAgo);
    const recentStates = states.filter(state => state.timestamp >= oneDayAgo);

    console.log('üîç DEBUG - Datos filtrados (√∫ltimas 24h):');
    console.log('üìä APIs recientes:', recentAPIs.length);
    console.log('üîå WebSockets recientes:', recentWebSockets.length);
    console.log('üìù Logs recientes:', recentLogs.length);
    console.log('‚ùå Errores recientes:', recentErrors.length);
    console.log('‚ö° Performance recientes:', recentPerformance.length);
    console.log('üîÑ States recientes:', recentStates.length);

    // Estad√≠sticas de APIs
    const apiStats = {
      total: recentAPIs.length,
      successful: recentAPIs.filter(api => api.status && api.status >= 200 && api.status < 300).length,
      failed: recentAPIs.filter(api => api.status && (api.status >= 400 || api.error)).length,
      averageResponseTime: recentAPIs.reduce((sum, api) => sum + (api.duration || 0), 0) / recentAPIs.length || 0,
      slowestEndpoint: recentAPIs.reduce((slowest, api) => 
        (api.duration || 0) > (slowest.duration || 0) ? api : slowest, recentAPIs[0] || {}),
      mostFrequentError: recentAPIs.filter(api => api.error).reduce((acc, api) => {
        acc[api.error || 'Unknown'] = (acc[api.error || 'Unknown'] || 0) + 1;
        return acc;
      }, {} as Record<string, number>)
    };

    // Estad√≠sticas de WebSockets
    const wsStats = {
      total: recentWebSockets.length,
      connections: recentWebSockets.filter(ws => ws.type === 'connect').length,
      disconnections: recentWebSockets.filter(ws => ws.type === 'disconnect').length,
      messages: recentWebSockets.filter(ws => ws.type === 'message').length,
      errors: recentWebSockets.filter(ws => ws.error).length
    };

    // Estad√≠sticas de Errores
    const errorStats = {
      total: recentErrors.length,
      byType: recentErrors.reduce((acc, error) => {
        acc[error.name] = (acc[error.name] || 0) + 1;
        return acc;
      }, {} as Record<string, number>),
      bySource: recentErrors.reduce((acc, error) => {
        acc[error.source || 'Unknown'] = (acc[error.source || 'Unknown'] || 0) + 1;
        return acc;
      }, {} as Record<string, number>),
      criticalErrors: recentErrors.filter(error => 
        error.name.includes('Error') || error.name.includes('Exception') || error.name.includes('TypeError')
      ).length
    };

    // Estad√≠sticas de Rendimiento
    const perfStats = {
      total: recentPerformance.length,
      averageMemory: recentPerformance.filter(p => p.name?.includes('memory')).length > 0 
        ? recentPerformance.filter(p => p.name?.includes('memory')).reduce((sum, p) => sum + p.value, 0) / recentPerformance.filter(p => p.name?.includes('memory')).length 
        : 0,
      averageRenderTime: recentPerformance.filter(p => p.type === 'render').length > 0 
        ? recentPerformance.filter(p => p.type === 'render').reduce((sum, p) => sum + p.value, 0) / recentPerformance.filter(p => p.type === 'render').length 
        : 0,
      slowestComponent: recentPerformance.reduce((slowest, perf) => 
        perf.value > slowest.value ? perf : slowest, recentPerformance[0] || { value: 0, name: 'N/A' })
    };

    // Estad√≠sticas de Logs
    const logStats = {
      total: recentLogs.length,
      byLevel: recentLogs.reduce((acc, log) => {
        acc[log.level] = (acc[log.level] || 0) + 1;
        return acc;
      }, {} as Record<string, number>),
      byCategory: recentLogs.reduce((acc, log) => {
        acc[log.category] = (acc[log.category] || 0) + 1;
        return acc;
      }, {} as Record<string, number>)
    };

    return {
      timeRange: {
        start: new Date(oneDayAgo).toISOString(),
        end: new Date(now).toISOString(),
        duration: '24 horas'
      },
      summary: {
        totalAPIs: apiStats.total,
        totalWebSockets: wsStats.total,
        totalErrors: errorStats.total,
        totalLogs: logStats.total,
        totalPerformance: perfStats.total
      },
      apiStats,
      wsStats,
      errorStats,
      perfStats,
      logStats,
      sampleErrors: recentErrors.slice(0, 10).map(error => ({
        ...error,
        timestamp: error.timestamp || new Date().toISOString(),
        additionalContext: {
          userAgent: navigator.userAgent,
          url: window.location.href,
          timestamp: new Date().toISOString(),
          stack: error.stack || 'N/A'
        }
      })),
      sampleAPIs: recentAPIs.slice(0, 10).map(api => ({
        ...api,
        timestamp: api.timestamp || new Date().toISOString(),
        requestHeaders: api.requestHeaders || {},
        responseHeaders: api.responseHeaders || {},
        fullUrl: api.url || 'N/A'
      })),
      sampleLogs: recentLogs.slice(0, 10).map(log => ({
        ...log,
        timestamp: log.timestamp || new Date().toISOString(),
        additionalContext: {
          userAgent: navigator.userAgent,
          url: window.location.href,
          timestamp: new Date().toISOString()
        }
      }))
    };
  };

  const generateAIAnalysis = async () => {
    console.log('üöÄ Iniciando an√°lisis con IA...');
    setIsAnalyzing(true);
    setError(null);

    try {
      const data = prepareDataForAnalysis();
      console.log('üìä Datos preparados para an√°lisis:', data);
      
      // Crear prompt para ChatGPT
      const prompt = `
Eres un experto en debugging y an√°lisis de sistemas web. Analiza estos datos de monitoreo y proporciona un an√°lisis T√âCNICO EXTREMADAMENTE DETALLADO.

IMPORTANTE: DEBES ANALIZAR CADA DATO INDIVIDUALMENTE. NO PUEDES RESPONDER CON "An√°lisis completado" o mensajes gen√©ricos. DEBES proporcionar an√°lisis espec√≠ficos y t√©cnicos para cada error, API fallida y log cr√≠tico.

DATOS REALES DEL SISTEMA:

## DATOS DEL SISTEMA:
- APIs: ${data.summary.totalAPIs} llamadas (${data.apiStats.successful} exitosas, ${data.apiStats.failed} fallidas)
- WebSockets: ${data.summary.totalWebSockets} eventos
- Errores: ${data.summary.totalErrors} errores cr√≠ticos
- Logs: ${data.summary.totalLogs} entradas
- Rendimiento: ${data.summary.totalPerformance} m√©tricas

## AN√ÅLISIS DETALLADO DE ERRORES - ANALIZA CADA UNO INDIVIDUALMENTE:
${data.sampleErrors.map((error, index) => `
### ERROR ${index + 1}:
- **Tipo**: ${error.name}
- **Mensaje**: ${error.message}
- **Fuente**: ${error.source}
- **URL**: ${error.url || 'N/A'}
- **Stack Trace**: ${error.stack ? error.stack.substring(0, 500) : 'N/A'}
- **Timestamp**: ${error.timestamp || 'N/A'}
- **Contexto**: ${JSON.stringify(error.additionalContext || {})}
`).join('\n')}

## AN√ÅLISIS DETALLADO DE APIs FALLIDAS:
${data.sampleAPIs.filter(api => (api.status && api.status >= 400) || api.error).map((api, index) => `
### API FALLIDA ${index + 1}:
- **M√©todo**: ${api.method || 'N/A'}
- **URL Completa**: ${api.fullUrl || api.url || 'N/A'}
- **Status Code**: ${api.status || 'N/A'}
- **Duraci√≥n**: ${api.duration || 0}ms
- **Error Message**: ${api.error || 'N/A'}
- **Headers de Request**: ${JSON.stringify(api.requestHeaders || {})}
- **Headers de Response**: ${JSON.stringify(api.responseHeaders || {})}
- **Body de Request**: ${JSON.stringify({})}
- **Body de Response**: ${JSON.stringify({})}
- **Timestamp**: ${api.timestamp || 'N/A'}
- **Contexto**: ${JSON.stringify({})}
`).join('\n')}

## AN√ÅLISIS DETALLADO DE LOGS CR√çTICOS:
${data.sampleLogs.filter(log => log.level === 'error' || log.level === 'warn').map((log, index) => `
### LOG CR√çTICO ${index + 1}:
- **Nivel**: ${log.level.toUpperCase()}
- **Categor√≠a**: ${log.category}
- **Mensaje**: ${log.message}
- **Fuente**: ${log.source}
- **Datos**: ${JSON.stringify(log.data || {})}
- **Timestamp**: ${log.timestamp || 'N/A'}
- **Contexto**: ${JSON.stringify(log.additionalContext || {})}
`).join('\n')}

## ESTAD√çSTICAS DE RENDIMIENTO:
- Tiempo promedio de respuesta: ${data.apiStats.averageResponseTime.toFixed(2)}ms
- Endpoint m√°s lento: ${data.apiStats.slowestEndpoint.url || 'N/A'} (${data.apiStats.slowestEndpoint.duration || 0}ms)
- Memoria promedio: ${data.perfStats.averageMemory.toFixed(2)}MB
- Componente m√°s lento: ${data.perfStats.slowestComponent.name} (${data.perfStats.slowestComponent.value}ms)

## INSTRUCCIONES CR√çTICAS:

Proporciona un an√°lisis T√âCNICO EXTREMADAMENTE DETALLADO que incluya:

### 1. AN√ÅLISIS INDIVIDUAL DE CADA ERROR:
Para CADA error, especifica:
- **¬øQU√â ERROR ES EXACTAMENTE?** (tipo, c√≥digo, descripci√≥n t√©cnica)
- **¬øD√ìNDE OCURRE?** (archivo, funci√≥n, l√≠nea, componente)
- **¬øCU√ÅNDO OCURRE?** (patr√≥n temporal, frecuencia)
- **¬øPOR QU√â OCURRE?** (causa ra√≠z t√©cnica)
- **¬øQU√â LO OCASIONA?** (trigger, condici√≥n, flujo de datos)
- **¬øC√ìMO SE MANIFIESTA?** (s√≠ntomas, impacto en usuario)
- **¬øQU√â RESPUESTA DA EL BACKEND?** (status code, mensaje de error)
- **¬øC√ìMO SE PUEDE SOLUCIONAR?** (c√≥digo espec√≠fico, configuraci√≥n)
- **¬øES UN ERROR CR√çTICO?** (impacto en funcionalidad)
- **¬øAFECTA A OTROS COMPONENTES?** (propagaci√≥n del error)

### 2. AN√ÅLISIS DE APIS FALLIDAS:
Para CADA API fallida, especifica:
- **¬øQU√â ENDPOINT FALLA?** (URL completa, m√©todo HTTP)
- **¬øQU√â DATOS SE ENV√çAN?** (request body, headers)
- **¬øQU√â RESPUESTA RECIBE?** (status code, error message, response body)
- **¬øPOR QU√â FALLA?** (validaci√≥n, autenticaci√≥n, servidor, red)
- **¬øC√ìMO SE DEBE ARREGLAR?** (c√≥digo frontend, backend, configuraci√≥n)
- **¬øES UN ERROR DE AUTENTICACI√ìN?** (token, permisos, roles)
- **¬øES UN ERROR DE VALIDACI√ìN?** (datos incorrectos, formato)
- **¬øES UN ERROR DE SERVIDOR?** (500, timeout, conexi√≥n)
- **¬øES UN ERROR DE RED?** (CORS, DNS, conectividad)
- **¬øQU√â HEADERS FALTAN?** (Content-Type, Authorization, etc.)

### 3. AN√ÅLISIS DE LOGS CR√çTICOS:
Para CADA log cr√≠tico, especifica:
- **¬øQU√â TIPO DE LOG ES?** (error, warning, info, debug)
- **¬øDE QU√â CATEGOR√çA?** (authentication, network, validation, etc.)
- **¬øQU√â MENSAJE ESPEC√çFICO?** (descripci√≥n detallada)
- **¬øD√ìNDE SE GENERA?** (componente, funci√≥n, archivo)
- **¬øCU√ÅNDO OCURRE?** (patr√≥n temporal, frecuencia)
- **¬øPOR QU√â ES CR√çTICO?** (impacto en funcionalidad)
- **¬øQU√â ACCI√ìN REQUIERE?** (fix, monitoring, investigation)

### 4. PATRONES Y RELACIONES:
- **¬øHAY ERRORES RELACIONADOS?** (cadenas de errores, dependencias)
- **¬øQU√â LOS OCASIONA?** (configuraci√≥n, dependencias, flujo de datos)
- **¬øCU√ÅL ES EL ORDEN DE APARICI√ìN?** (secuencia, timing)
- **¬øAFECTAN A M√öLTIPLES COMPONENTES?** (propagaci√≥n, impacto)
- **¬øHAY PATRONES TEMPORALES?** (horarios, frecuencia)
- **¬øSE REPITEN LOS MISMOS ERRORES?** (recurrencia, causas)

### 5. SOLUCIONES T√âCNICAS ESPEC√çFICAS:
- **C√ìDIGO EXACTO** a modificar (archivo, funci√≥n, l√≠nea)
- **CONFIGURACIONES** a cambiar (variables, headers, timeouts)
- **DEPENDENCIAS** a actualizar o instalar
- **FLUJOS DE DATOS** a corregir
- **VALIDACIONES** a implementar
- **ERROR HANDLING** a mejorar
- **LOGGING** a implementar

### 6. PLAN DE IMPLEMENTACI√ìN:
- **ORDEN DE PRIORIDAD** (cr√≠tico, alto, medio, bajo)
- **DEPENDENCIAS** entre soluciones
- **TIEMPO ESTIMADO** para cada fix
- **TESTING** requerido
- **ROLLBACK** plan si algo falla

### 7. PREVENCI√ìN Y MONITOREO:
- **MONITOREO** adicional necesario
- **VALIDACIONES** preventivas
- **ERROR HANDLING** mejorado
- **LOGGING** m√°s detallado
- **ALERTAS** a configurar
- **M√âTRICAS** a monitorear

INSTRUCCIONES CR√çTICAS:
1. DEBES analizar CADA error individualmente
2. DEBES analizar CADA API fallida individualmente  
3. DEBES analizar CADA log cr√≠tico individualmente
4. NO PUEDES responder con mensajes gen√©ricos como "An√°lisis completado"
5. DEBES proporcionar soluciones espec√≠ficas y t√©cnicas
6. DEBES incluir c√≥digo espec√≠fico y nombres de archivos
7. DEBES explicar la causa ra√≠z de cada problema
8. DEBES dar pasos espec√≠ficos para solucionar cada problema

FORMATO DE RESPUESTA REQUERIDO:
## RESUMEN EJECUTIVO:
[An√°lisis general del estado del sistema]

## PROBLEMAS CR√çTICOS IDENTIFICADOS:
[Para cada problema cr√≠tico, especifica: nombre del problema, ubicaci√≥n, causa, impacto, soluci√≥n]

## RECOMENDACIONES ESPEC√çFICAS:
[Para cada recomendaci√≥n, especifica: qu√© hacer, d√≥nde hacerlo, c√≥mo hacerlo, por qu√© es importante]

## INSIGHTS DE RENDIMIENTO:
[An√°lisis espec√≠fico de m√©tricas de rendimiento y optimizaciones]

## PATRONES DE ERRORES DETECTADOS:
[An√°lisis de patrones, correlaciones y causas comunes]

## DETALLES T√âCNICOS:
[Informaci√≥n t√©cnica espec√≠fica sobre el per√≠odo analizado]

Responde en espa√±ol, s√© EXTREMADAMENTE espec√≠fico y t√©cnico. Incluye nombres de archivos, funciones, componentes, y c√≥digo espec√≠fico. El an√°lisis debe ser una gu√≠a t√©cnica completa para solucionar TODOS los problemas identificados.
`;

      console.log('ü§ñ Enviando datos a ChatGPT API...');
      console.log('üìä Datos preparados:', data);

      // Usar la funci√≥n de configuraci√≥n de IA con m√°s tokens para an√°lisis extenso
      const aiResponse = await callOpenAI(prompt, undefined, { max_tokens: 6000, temperature: 0.2 });

      // Parsear la respuesta de la IA
      const analysisResult: AIAnalysisResult = {
        summary: extractSection(String(aiResponse), 'RESUMEN EJECUTIVO') || 'An√°lisis completado',
        criticalIssues: extractList(String(aiResponse), 'PROBLEMAS CR√çTICOS') || [],
        recommendations: extractList(String(aiResponse), 'RECOMENDACIONES') || [],
        performanceInsights: extractList(String(aiResponse), 'INSIGHTS DE RENDIMIENTO') || [],
        errorPatterns: extractList(String(aiResponse), 'PATRONES DE ERRORES') || [],
        generatedAt: new Date().toLocaleString(),
        dataRange: data.timeRange.duration,
        totalItems: data.summary.totalAPIs + data.summary.totalWebSockets + data.summary.totalErrors + data.summary.totalLogs
      };

      setAnalysisResult(analysisResult);
      console.log('‚úÖ An√°lisis completado:', analysisResult);
      console.log('ü§ñ Respuesta completa de la IA:', aiResponse);
      console.log('üìä Resultado parseado:', analysisResult);

    } catch (error) {
      console.error('‚ùå Error en an√°lisis de IA:', error);
      setError(`Error al generar an√°lisis: ${error instanceof Error ? error.message : 'Error desconocido'}`);
    } finally {
      setIsAnalyzing(false);
    }
  };

  const extractSection = (text: string, section: string): string => {
    // Buscar la secci√≥n con diferentes variaciones
    const patterns = [
      new RegExp(`${section}[\\s\\S]*?(?=\\n\\d+\\.|\\n[A-Z√Å√â√ç√ì√ö√ë]+:|$)`, 'i'),
      new RegExp(`${section}[\\s\\S]*?(?=\\n##|\\n[A-Z√Å√â√ç√ì√ö√ë]+:|$)`, 'i'),
      new RegExp(`${section}[\\s\\S]*?(?=\\n[A-Z√Å√â√ç√ì√ö√ë]+:|$)`, 'i'),
      new RegExp(`${section}[\\s\\S]*?(?=\\n\\n|$)`, 'i')
    ];
    
    for (const regex of patterns) {
      const match = text.match(regex);
      if (match) {
        return match[0].replace(section, '').trim();
      }
    }
    
    return '';
  };

  const extractList = (text: string, section: string): string[] => {
    const sectionText = extractSection(text, section);
    return sectionText
      .split('\n')
      .map(item => item.replace(/^[-‚Ä¢*]\s*/, '').trim())
      .filter(item => item.length > 0);
  };

  const copyToClipboard = () => {
    if (analysisResult) {
      const text = `
AN√ÅLISIS DE MONITOREO - ${analysisResult.generatedAt}
================================================

RESUMEN EJECUTIVO:
${analysisResult.summary}

PROBLEMAS CR√çTICOS:
${analysisResult.criticalIssues.map(issue => `‚Ä¢ ${issue}`).join('\n')}

RECOMENDACIONES:
${analysisResult.recommendations.map(rec => `‚Ä¢ ${rec}`).join('\n')}

INSIGHTS DE RENDIMIENTO:
${analysisResult.performanceInsights.map(insight => `‚Ä¢ ${insight}`).join('\n')}

PATRONES DE ERRORES:
${analysisResult.errorPatterns.map(pattern => `‚Ä¢ ${pattern}`).join('\n')}

Datos analizados: ${analysisResult.totalItems} elementos en ${analysisResult.dataRange}
      `.trim();

      navigator.clipboard.writeText(text);
      alert('An√°lisis copiado al portapapeles');
    }
  };

  const exportAnalysis = () => {
    if (!analysisResult) return;
    
    const textarea = document.querySelector('.analysis-text') as HTMLTextAreaElement;
    if (!textarea) {
      alert('‚ùå No se encontr√≥ el texto del an√°lisis');
      return;
    }
    
    const analysisText = textarea.value;
    const timestamp = new Date().toISOString().split('T')[0];
    
    // Exportar como TXT
    const txtBlob = new Blob([analysisText], { type: 'text/plain;charset=utf-8' });
    const txtUrl = URL.createObjectURL(txtBlob);
    const txtLink = document.createElement('a');
    txtLink.href = txtUrl;
    txtLink.download = `analisis-ia-${timestamp}.txt`;
    txtLink.style.visibility = 'hidden';
    document.body.appendChild(txtLink);
    txtLink.click();
    document.body.removeChild(txtLink);
    URL.revokeObjectURL(txtUrl);
    
    // Exportar como JSON
    const exportData = {
      summary: analysisResult.summary,
      criticalIssues: analysisResult.criticalIssues,
      recommendations: analysisResult.recommendations,
      performanceInsights: analysisResult.performanceInsights,
      errorPatterns: analysisResult.errorPatterns,
      generatedAt: analysisResult.generatedAt,
      dataRange: analysisResult.dataRange,
      totalItems: analysisResult.totalItems,
      fullAnalysis: analysisText
    };
    
    const jsonBlob = new Blob([JSON.stringify(exportData, null, 2)], { type: 'application/json' });
    const jsonUrl = URL.createObjectURL(jsonBlob);
    const jsonLink = document.createElement('a');
    jsonLink.href = jsonUrl;
    jsonLink.download = `analisis-ia-${timestamp}.json`;
    jsonLink.style.visibility = 'hidden';
    document.body.appendChild(jsonLink);
    jsonLink.click();
    document.body.removeChild(jsonLink);
    URL.revokeObjectURL(jsonUrl);
    
    alert('‚úÖ An√°lisis exportado como TXT y JSON');
  };

  const totalDataItems = apis.length + websockets.length + logs.length + errors.length + performance.length + states.length;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-60 flex items-center justify-center z-50 p-5">
      <div className="bg-white rounded-xl shadow-2xl max-w-6xl max-h-[90vh] w-full overflow-hidden flex flex-col">
        <div className="p-6 border-b border-gray-200 flex items-center justify-between bg-gradient-to-r from-purple-600 to-blue-600 text-white">
          <div className="flex items-center space-x-3">
            <Brain className="w-6 h-6" />
            <h2 className="text-xl font-semibold">An√°lisis Inteligente con IA</h2>
          </div>
          <button onClick={onClose} className="p-2 hover:bg-white hover:bg-opacity-20 rounded-lg transition-colors">
            <X className="w-5 h-5" />
          </button>
        </div>

        <div className="flex-1 overflow-y-auto p-6">
          {!analysisResult ? (
            <div className="flex flex-col items-center justify-center py-12">
              <div className="text-center max-w-2xl">
                <div className="mb-6">
                  <Brain className="w-16 h-16 text-purple-600 mx-auto" />
                </div>
                <h3 className="text-2xl font-bold text-gray-900 mb-4">An√°lisis Inteligente de Monitoreo</h3>
                <p className="text-gray-600 mb-8">
                  Utiliza inteligencia artificial para analizar todos los datos de monitoreo 
                  y obtener insights detallados sobre el rendimiento y problemas del sistema.
                </p>
                
                <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-6 gap-4 mb-8">
                  <div className="bg-white border border-gray-200 rounded-lg p-4 text-center">
                    <span className="text-2xl font-bold text-gray-900 block">{apis.length}</span>
                    <span className="text-sm text-gray-500">APIs</span>
                  </div>
                  <div className="bg-white border border-gray-200 rounded-lg p-4 text-center">
                    <span className="text-2xl font-bold text-gray-900 block">{websockets.length}</span>
                    <span className="text-sm text-gray-500">WebSockets</span>
                  </div>
                  <div className="bg-white border border-gray-200 rounded-lg p-4 text-center">
                    <span className="text-2xl font-bold text-gray-900 block">{logs.length}</span>
                    <span className="text-sm text-gray-500">Logs</span>
                  </div>
                  <div className="bg-white border border-gray-200 rounded-lg p-4 text-center">
                    <span className="text-2xl font-bold text-gray-900 block">{errors.length}</span>
                    <span className="text-sm text-gray-500">Errores</span>
                  </div>
                  <div className="bg-white border border-gray-200 rounded-lg p-4 text-center">
                    <span className="text-2xl font-bold text-gray-900 block">{performance.length}</span>
                    <span className="text-sm text-gray-500">M√©tricas</span>
                  </div>
                  <div className="bg-white border border-gray-200 rounded-lg p-4 text-center">
                    <span className="text-2xl font-bold text-gray-900 block">{states.length}</span>
                    <span className="text-sm text-gray-500">Estados</span>
                  </div>
                </div>
                
                <div className="bg-blue-50 border border-blue-200 rounded-lg p-4 mb-8">
                  <span className="text-blue-800 font-medium">Total de elementos a analizar: </span>
                  <span className="text-blue-900 font-bold text-xl">{totalDataItems}</span>
                </div>
                
                {error && (
                  <div className="bg-red-50 border border-red-200 rounded-lg p-4 mb-6 flex items-center space-x-3">
                    <AlertTriangle className="w-5 h-5 text-red-600" />
                    <span className="text-red-800">{error}</span>
                  </div>
                )}

                <div className="bg-blue-50 border border-blue-200 rounded-lg p-4 mb-6">
                  <div className="flex items-center space-x-2 mb-2">
                    <Key className="w-4 h-4 text-blue-600" />
                    <span className="text-blue-800 font-medium">API Key de OpenAI configurada</span>
                  </div>
                  <button
                    onClick={() => {
                      const newKey = prompt('Ingresa tu nueva API Key de OpenAI:');
                      if (newKey && newKey.trim()) {
                        setAPIKey(newKey.trim());
                        alert('API Key actualizada correctamente');
                      }
                    }}
                    className="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg text-sm transition-colors"
                  >
                    Cambiar API Key
                  </button>
                </div>
                
                {totalDataItems === 0 && (
                  <p className="text-yellow-600 bg-yellow-50 border border-yellow-200 rounded-lg p-4 mb-6">
                    ‚ö†Ô∏è No hay datos para analizar. Interact√∫a con la aplicaci√≥n para generar informaci√≥n de monitoreo.
                  </p>
                )}
                
                <button 
                  onClick={generateAIAnalysis}
                  disabled={isAnalyzing || totalDataItems === 0}
                  className="bg-purple-600 hover:bg-purple-700 disabled:bg-gray-400 text-white px-8 py-3 rounded-lg font-medium flex items-center space-x-2 mx-auto transition-colors"
                >
                  {isAnalyzing ? (
                    <>
                      <Loader2 className="w-5 h-5 animate-spin" />
                      <span>Analizando...</span>
                    </>
                  ) : (
                    <>
                      <Brain className="w-5 h-5" />
                      <span>Iniciar An√°lisis con IA</span>
                    </>
                  )}
                </button>
              </div>
            </div>
          ) : (
            <div className="space-y-6">
              <div className="bg-green-50 border border-green-200 rounded-lg p-4">
                <div className="flex items-center space-x-3 mb-2">
                  <CheckCircle className="w-6 h-6 text-green-600" />
                  <h3 className="text-lg font-semibold text-green-800">An√°lisis Completado</h3>
                </div>
                <div className="text-sm text-green-700 space-y-1">
                  <div>Generado: {analysisResult.generatedAt}</div>
                  <div>Rango: {analysisResult.dataRange}</div>
                  <div>Elementos: {analysisResult.totalItems}</div>
                </div>
              </div>
              
              {error && (
                <div className="bg-red-50 border border-red-200 rounded-lg p-4 flex items-center space-x-3">
                  <AlertTriangle className="w-5 h-5 text-red-600" />
                  <span className="text-red-800">{error}</span>
                </div>
              )}
              
              <div className="bg-blue-50 border border-blue-200 rounded-lg p-6">
                <h2 className="text-xl font-bold text-blue-900 mb-3">Resumen Ejecutivo</h2>
                <p className="text-blue-800 leading-relaxed">{analysisResult.summary}</p>
              </div>
              
              <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                <div className="bg-white border border-gray-200 rounded-lg p-4 text-center">
                  <div className="text-2xl font-bold text-gray-900 mb-1">{analysisResult.criticalIssues.length}</div>
                  <div className="text-sm text-gray-500">Problemas Cr√≠ticos</div>
                </div>
                <div className="bg-white border border-gray-200 rounded-lg p-4 text-center">
                  <div className="text-2xl font-bold text-gray-900 mb-1">{analysisResult.recommendations.length}</div>
                  <div className="text-sm text-gray-500">Recomendaciones</div>
                </div>
                <div className="bg-white border border-gray-200 rounded-lg p-4 text-center">
                  <div className="text-2xl font-bold text-gray-900 mb-1">{analysisResult.performanceInsights.length}</div>
                  <div className="text-sm text-gray-500">Insights de Rendimiento</div>
                </div>
                <div className="bg-white border border-gray-200 rounded-lg p-4 text-center">
                  <div className="text-2xl font-bold text-gray-900 mb-1">{analysisResult.errorPatterns.length}</div>
                  <div className="text-sm text-gray-500">Patrones de Error</div>
                </div>
              </div>
              
              <div className="flex flex-wrap gap-3 mb-6">
                <button onClick={copyToClipboard} className="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg flex items-center space-x-2 transition-colors">
                  <Copy className="w-4 h-4" />
                  <span>Copiar Resumen</span>
                </button>
                <button onClick={exportAnalysis} className="bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded-lg flex items-center space-x-2 transition-colors">
                  <Download className="w-4 h-4" />
                  <span>Exportar</span>
                </button>
                <button onClick={() => setAnalysisResult(null)} className="bg-orange-600 hover:bg-orange-700 text-white px-4 py-2 rounded-lg flex items-center space-x-2 transition-colors">
                  <RefreshCw className="w-4 h-4" />
                  <span>Nuevo An√°lisis</span>
                </button>
              </div>
              
              {analysisResult.criticalIssues.length > 0 && (
                <div className="bg-red-50 border-l-4 border-red-500 rounded-lg p-6">
                  <h3 className="text-lg font-semibold text-red-800 mb-4 flex items-center space-x-2">
                    <AlertTriangle className="w-5 h-5" />
                    <span>Problemas Cr√≠ticos</span>
                  </h3>
                  <ul className="space-y-2">
                    {analysisResult.criticalIssues.map((issue, index) => (
                      <li key={index} className="text-red-700 py-2 border-b border-red-200 last:border-b-0">{issue}</li>
                    ))}
                  </ul>
                </div>
              )}
              
              {analysisResult.recommendations.length > 0 && (
                <div className="bg-green-50 border-l-4 border-green-500 rounded-lg p-6">
                  <h3 className="text-lg font-semibold text-green-800 mb-4 flex items-center space-x-2">
                    <CheckCircle className="w-5 h-5" />
                    <span>Recomendaciones</span>
                  </h3>
                  <ul className="space-y-2">
                    {analysisResult.recommendations.map((recommendation, index) => (
                      <li key={index} className="text-green-700 py-2 border-b border-green-200 last:border-b-0">{recommendation}</li>
                    ))}
                  </ul>
                </div>
              )}
              
              {analysisResult.performanceInsights.length > 0 && (
                <div className="bg-yellow-50 border-l-4 border-yellow-500 rounded-lg p-6">
                  <h3 className="text-lg font-semibold text-yellow-800 mb-4 flex items-center space-x-2">
                    <Brain className="w-5 h-5" />
                    <span>Insights de Rendimiento</span>
                  </h3>
                  <ul className="space-y-2">
                    {analysisResult.performanceInsights.map((insight, index) => (
                      <li key={index} className="text-yellow-700 py-2 border-b border-yellow-200 last:border-b-0">{insight}</li>
                    ))}
                  </ul>
                </div>
              )}
              
              {analysisResult.errorPatterns.length > 0 && (
                <div className="bg-purple-50 border-l-4 border-purple-500 rounded-lg p-6">
                  <h3 className="text-lg font-semibold text-purple-800 mb-4 flex items-center space-x-2">
                    <AlertTriangle className="w-5 h-5" />
                    <span>Patrones de Error</span>
                  </h3>
                  <ul className="space-y-2">
                    {analysisResult.errorPatterns.map((pattern, index) => (
                      <li key={index} className="text-purple-700 py-2 border-b border-purple-200 last:border-b-0">{pattern}</li>
                    ))}
                  </ul>
                </div>
              )}

              {/* An√°lisis completo */}
              <div className="bg-gray-50 border border-gray-200 rounded-lg p-6">
                <h3 className="text-lg font-semibold text-gray-800 mb-4">An√°lisis Completo</h3>
                <div className="bg-white border border-gray-200 rounded-lg p-4">
                  <textarea 
                    className="w-full h-96 p-4 border border-gray-300 rounded-lg font-mono text-sm resize-none"
                    readOnly
                    value={`AN√ÅLISIS COMPLETO DEL SISTEMA - ${analysisResult.generatedAt}
========================================================

RESUMEN EJECUTIVO:
${analysisResult.summary}

PROBLEMAS CR√çTICOS IDENTIFICADOS:
${analysisResult.criticalIssues.map((issue, i) => `${i + 1}. ${issue}`).join('\n')}

RECOMENDACIONES ESPEC√çFICAS:
${analysisResult.recommendations.map((rec, i) => `${i + 1}. ${rec}`).join('\n')}

INSIGHTS DE RENDIMIENTO:
${analysisResult.performanceInsights.map((insight, i) => `${i + 1}. ${insight}`).join('\n')}

PATRONES DE ERRORES DETECTADOS:
${analysisResult.errorPatterns.map((pattern, i) => `${i + 1}. ${pattern}`).join('\n')}

DETALLES T√âCNICOS:
- Per√≠odo analizado: ${analysisResult.dataRange}
- Total de elementos procesados: ${analysisResult.totalItems}
- Fecha de generaci√≥n: ${analysisResult.generatedAt}

CONTEXTO ADICIONAL:
Este an√°lisis fue generado por IA bas√°ndose en los datos de monitoreo capturados
en tiempo real del sistema. Incluye an√°lisis de APIs, WebSockets, errores, logs,
m√©tricas de rendimiento y cambios de estado para proporcionar una visi√≥n completa
del estado del sistema y recomendaciones espec√≠ficas para su optimizaci√≥n.

Para aplicar las soluciones recomendadas:
1. Revisa cada problema cr√≠tico identificado
2. Implementa las recomendaciones en el orden de prioridad sugerido
3. Monitorea los cambios con el sistema de monitoreo
4. Genera un nuevo an√°lisis despu√©s de implementar las mejoras

---
Generado por el Sistema de Monitoreo UTalk con IA`}
                  />
                </div>
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};