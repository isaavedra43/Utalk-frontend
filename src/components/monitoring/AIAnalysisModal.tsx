import React, { useState } from 'react';
import { X, Brain, Download, Copy, RefreshCw, AlertTriangle, CheckCircle, Clock, Key, Loader2 } from 'lucide-react';
import { useMonitoring } from './MonitoringContext';
import { callOpenAI, getOpenAIAPIKey, validateAPIKey, setAPIKey } from '../../config/ai';

interface AIAnalysisModalProps {
  onClose: () => void;
}

interface AIAnalysisResult {
  summary: string;
  criticalIssues: string[];
  recommendations: string[];
  performanceInsights: string[];
  errorPatterns: string[];
  generatedAt: string;
  dataRange: string;
  totalItems: number;
}

export const AIAnalysisModal: React.FC<AIAnalysisModalProps> = ({ onClose }) => {
  const { apis, websockets, logs, errors, performance, states, validations } = useMonitoring();
  const [isAnalyzing, setIsAnalyzing] = useState(false);
  const [analysisResult, setAnalysisResult] = useState<AIAnalysisResult | null>(null);
  const [error, setError] = useState<string | null>(null);

  const prepareDataForAnalysis = () => {
    const now = Date.now();
    const oneHourAgo = now - (60 * 60 * 1000);
    const oneDayAgo = now - (24 * 60 * 60 * 1000);

    console.log('üîç DEBUG - Datos del store de monitoreo:');
    console.log('üìä APIs totales:', apis.length);
    console.log('üîå WebSockets totales:', websockets.length);
    console.log('üìù Logs totales:', logs.length);
    console.log('‚ùå Errores totales:', errors.length);
    console.log('‚ö° Performance totales:', performance.length);
    console.log('üîÑ States totales:', states.length);

    // Filtrar datos recientes
    const recentAPIs = apis.filter(api => api.timestamp >= oneDayAgo);
    const recentWebSockets = websockets.filter(ws => ws.timestamp >= oneDayAgo);
    const recentLogs = logs.filter(log => log.timestamp >= oneDayAgo);
    const recentErrors = errors.filter(error => error.timestamp >= oneDayAgo);
    const recentPerformance = performance.filter(perf => perf.timestamp >= oneDayAgo);
    const recentStates = states.filter(state => state.timestamp >= oneDayAgo);

    console.log('üîç DEBUG - Datos filtrados (√∫ltimas 24h):');
    console.log('üìä APIs recientes:', recentAPIs.length);
    console.log('üîå WebSockets recientes:', recentWebSockets.length);
    console.log('üìù Logs recientes:', recentLogs.length);
    console.log('‚ùå Errores recientes:', recentErrors.length);
    console.log('‚ö° Performance recientes:', recentPerformance.length);
    console.log('üîÑ States recientes:', recentStates.length);

    // Estad√≠sticas de APIs
    const apiStats = {
      total: recentAPIs.length,
      successful: recentAPIs.filter(api => api.status && api.status >= 200 && api.status < 300).length,
      failed: recentAPIs.filter(api => api.status && (api.status >= 400 || api.error)).length,
      averageResponseTime: recentAPIs.reduce((sum, api) => sum + (api.duration || 0), 0) / recentAPIs.length || 0,
      slowestEndpoint: recentAPIs.reduce((slowest, api) => 
        (api.duration || 0) > (slowest.duration || 0) ? api : slowest, recentAPIs[0] || {}),
      mostFrequentError: recentAPIs.filter(api => api.error).reduce((acc, api) => {
        acc[api.error || 'Unknown'] = (acc[api.error || 'Unknown'] || 0) + 1;
        return acc;
      }, {} as Record<string, number>)
    };

    // Estad√≠sticas de WebSockets
    const wsStats = {
      total: recentWebSockets.length,
      connections: recentWebSockets.filter(ws => ws.type === 'connect').length,
      disconnections: recentWebSockets.filter(ws => ws.type === 'disconnect').length,
      messages: recentWebSockets.filter(ws => ws.type === 'message').length,
      errors: recentWebSockets.filter(ws => ws.error).length
    };

    // Estad√≠sticas de Errores
    const errorStats = {
      total: recentErrors.length,
      byType: recentErrors.reduce((acc, error) => {
        acc[error.name] = (acc[error.name] || 0) + 1;
        return acc;
      }, {} as Record<string, number>),
      bySource: recentErrors.reduce((acc, error) => {
        acc[error.source || 'Unknown'] = (acc[error.source || 'Unknown'] || 0) + 1;
        return acc;
      }, {} as Record<string, number>),
      criticalErrors: recentErrors.filter(error => 
        error.name.includes('Error') || error.name.includes('Exception') || error.name.includes('TypeError')
      ).length
    };

    // Estad√≠sticas de Rendimiento
    const perfStats = {
      total: recentPerformance.length,
      averageMemory: recentPerformance.filter(p => p.type === 'memory').reduce((sum, p) => sum + p.value, 0) / recentPerformance.filter(p => p.type === 'memory').length || 0,
      averageRenderTime: recentPerformance.filter(p => p.type === 'render').reduce((sum, p) => sum + p.value, 0) / recentPerformance.filter(p => p.type === 'render').length || 0,
      slowestComponent: recentPerformance.reduce((slowest, perf) => 
        perf.value > slowest.value ? perf : slowest, recentPerformance[0] || { value: 0, name: 'N/A' })
    };

    // Estad√≠sticas de Logs
    const logStats = {
      total: recentLogs.length,
      byLevel: recentLogs.reduce((acc, log) => {
        acc[log.level] = (acc[log.level] || 0) + 1;
        return acc;
      }, {} as Record<string, number>),
      byCategory: recentLogs.reduce((acc, log) => {
        acc[log.category] = (acc[log.category] || 0) + 1;
        return acc;
      }, {} as Record<string, number>)
    };

    return {
      timeRange: {
        start: new Date(oneDayAgo).toISOString(),
        end: new Date(now).toISOString(),
        duration: '24 horas'
      },
      summary: {
        totalAPIs: apiStats.total,
        totalWebSockets: wsStats.total,
        totalErrors: errorStats.total,
        totalLogs: logStats.total,
        totalPerformance: perfStats.total
      },
      apiStats,
      wsStats,
      errorStats,
      perfStats,
      logStats,
      sampleErrors: recentErrors.slice(0, 10).map(error => ({
        ...error,
        timestamp: error.timestamp || new Date().toISOString(),
        context: {
          userAgent: navigator.userAgent,
          url: window.location.href,
          timestamp: new Date().toISOString(),
          stack: error.stack || 'N/A'
        }
      })),
      sampleAPIs: recentAPIs.slice(0, 10).map(api => ({
        ...api,
        timestamp: api.timestamp || new Date().toISOString(),
        requestHeaders: api.requestHeaders || {},
        responseHeaders: api.responseHeaders || {},
        requestBody: api.requestBody || {},
        responseBody: api.responseBody || {},
        fullUrl: api.url || 'N/A'
      })),
      sampleLogs: recentLogs.slice(0, 10).map(log => ({
        ...log,
        timestamp: log.timestamp || new Date().toISOString(),
        context: {
          userAgent: navigator.userAgent,
          url: window.location.href,
          timestamp: new Date().toISOString()
        }
      }))
    };
  };

  const generateAIAnalysis = async () => {
    console.log('üöÄ Iniciando an√°lisis con IA...');
    setIsAnalyzing(true);
    setError(null);

    try {
      const data = prepareDataForAnalysis();
      console.log('üìä Datos preparados para an√°lisis:', data);
      
      // Crear prompt para ChatGPT
      const prompt = `
Eres un experto en debugging y an√°lisis de sistemas web. Analiza estos datos de monitoreo y proporciona un an√°lisis T√âCNICO EXTREMADAMENTE DETALLADO.

IMPORTANTE: DEBES ANALIZAR CADA DATO INDIVIDUALMENTE. NO PUEDES RESPONDER CON "An√°lisis completado" o mensajes gen√©ricos. DEBES proporcionar an√°lisis espec√≠ficos y t√©cnicos para cada error, API fallida y log cr√≠tico.

DATOS REALES DEL SISTEMA:

## DATOS DEL SISTEMA:
- APIs: ${data.summary.totalAPIs} llamadas (${data.apiStats.successful} exitosas, ${data.apiStats.failed} fallidas)
- WebSockets: ${data.summary.totalWebSockets} eventos
- Errores: ${data.summary.totalErrors} errores cr√≠ticos
- Logs: ${data.summary.totalLogs} entradas
- Rendimiento: ${data.summary.totalPerformance} m√©tricas

## AN√ÅLISIS DETALLADO DE ERRORES - ANALIZA CADA UNO INDIVIDUALMENTE:
${data.sampleErrors.map((error, index) => `
### ERROR ${index + 1}:
- **Tipo**: ${error.name}
- **Mensaje**: ${error.message}
- **Fuente**: ${error.source}
- **URL**: ${error.url || 'N/A'}
- **Stack Trace**: ${error.stack ? error.stack.substring(0, 500) : 'N/A'}
- **Timestamp**: ${error.timestamp || 'N/A'}
- **Contexto**: ${JSON.stringify(error.context || {})}
`).join('\n')}

## AN√ÅLISIS DETALLADO DE APIs FALLIDAS:
${data.sampleAPIs.filter(api => api.status >= 400 || api.error).map((api, index) => `
### API FALLIDA ${index + 1}:
- **M√©todo**: ${api.method || 'N/A'}
- **URL Completa**: ${api.fullUrl || api.url || 'N/A'}
- **Status Code**: ${api.status || 'N/A'}
- **Duraci√≥n**: ${api.duration || 0}ms
- **Error Message**: ${api.error || 'N/A'}
- **Headers de Request**: ${JSON.stringify(api.requestHeaders || {})}
- **Headers de Response**: ${JSON.stringify(api.responseHeaders || {})}
- **Body de Request**: ${JSON.stringify(api.requestBody || {})}
- **Body de Response**: ${JSON.stringify(api.responseBody || {})}
- **Timestamp**: ${api.timestamp || 'N/A'}
- **Contexto**: ${JSON.stringify(api.context || {})}
`).join('\n')}

## AN√ÅLISIS DETALLADO DE LOGS CR√çTICOS:
${data.sampleLogs.filter(log => log.level === 'error' || log.level === 'warn').map((log, index) => `
### LOG CR√çTICO ${index + 1}:
- **Nivel**: ${log.level.toUpperCase()}
- **Categor√≠a**: ${log.category}
- **Mensaje**: ${log.message}
- **Fuente**: ${log.source}
- **Datos**: ${JSON.stringify(log.data || {})}
- **Timestamp**: ${log.timestamp || 'N/A'}
- **Contexto**: ${JSON.stringify(log.context || {})}
`).join('\n')}

## ESTAD√çSTICAS DE RENDIMIENTO:
- Tiempo promedio de respuesta: ${data.apiStats.averageResponseTime.toFixed(2)}ms
- Endpoint m√°s lento: ${data.apiStats.slowestEndpoint.url || 'N/A'} (${data.apiStats.slowestEndpoint.duration || 0}ms)
- Memoria promedio: ${data.perfStats.averageMemory.toFixed(2)}MB
- Componente m√°s lento: ${data.perfStats.slowestComponent.name} (${data.perfStats.slowestComponent.value}ms)

## INSTRUCCIONES CR√çTICAS:

Proporciona un an√°lisis T√âCNICO EXTREMADAMENTE DETALLADO que incluya:

### 1. AN√ÅLISIS INDIVIDUAL DE CADA ERROR:
Para CADA error, especifica:
- **¬øQU√â ERROR ES EXACTAMENTE?** (tipo, c√≥digo, descripci√≥n t√©cnica)
- **¬øD√ìNDE OCURRE?** (archivo, funci√≥n, l√≠nea, componente)
- **¬øCU√ÅNDO OCURRE?** (patr√≥n temporal, frecuencia)
- **¬øPOR QU√â OCURRE?** (causa ra√≠z t√©cnica)
- **¬øQU√â LO OCASIONA?** (trigger, condici√≥n, flujo de datos)
- **¬øC√ìMO SE MANIFIESTA?** (s√≠ntomas, impacto en usuario)
- **¬øQU√â RESPUESTA DA EL BACKEND?** (status code, mensaje de error)
- **¬øC√ìMO SE PUEDE SOLUCIONAR?** (c√≥digo espec√≠fico, configuraci√≥n)
- **¬øES UN ERROR CR√çTICO?** (impacto en funcionalidad)
- **¬øAFECTA A OTROS COMPONENTES?** (propagaci√≥n del error)

### 2. AN√ÅLISIS DE APIS FALLIDAS:
Para CADA API fallida, especifica:
- **¬øQU√â ENDPOINT FALLA?** (URL completa, m√©todo HTTP)
- **¬øQU√â DATOS SE ENV√çAN?** (request body, headers)
- **¬øQU√â RESPUESTA RECIBE?** (status code, error message, response body)
- **¬øPOR QU√â FALLA?** (validaci√≥n, autenticaci√≥n, servidor, red)
- **¬øC√ìMO SE DEBE ARREGLAR?** (c√≥digo frontend, backend, configuraci√≥n)
- **¬øES UN ERROR DE AUTENTICACI√ìN?** (token, permisos, roles)
- **¬øES UN ERROR DE VALIDACI√ìN?** (datos incorrectos, formato)
- **¬øES UN ERROR DE SERVIDOR?** (500, timeout, conexi√≥n)
- **¬øES UN ERROR DE RED?** (CORS, DNS, conectividad)
- **¬øQU√â HEADERS FALTAN?** (Content-Type, Authorization, etc.)

### 3. AN√ÅLISIS DE LOGS CR√çTICOS:
Para CADA log cr√≠tico, especifica:
- **¬øQU√â TIPO DE LOG ES?** (error, warning, info, debug)
- **¬øDE QU√â CATEGOR√çA?** (authentication, network, validation, etc.)
- **¬øQU√â MENSAJE ESPEC√çFICO?** (descripci√≥n detallada)
- **¬øD√ìNDE SE GENERA?** (componente, funci√≥n, archivo)
- **¬øCU√ÅNDO OCURRE?** (patr√≥n temporal, frecuencia)
- **¬øPOR QU√â ES CR√çTICO?** (impacto en funcionalidad)
- **¬øQU√â ACCI√ìN REQUIERE?** (fix, monitoring, investigation)

### 4. PATRONES Y RELACIONES:
- **¬øHAY ERRORES RELACIONADOS?** (cadenas de errores, dependencias)
- **¬øQU√â LOS OCASIONA?** (configuraci√≥n, dependencias, flujo de datos)
- **¬øCU√ÅL ES EL ORDEN DE APARICI√ìN?** (secuencia, timing)
- **¬øAFECTAN A M√öLTIPLES COMPONENTES?** (propagaci√≥n, impacto)
- **¬øHAY PATRONES TEMPORALES?** (horarios, frecuencia)
- **¬øSE REPITEN LOS MISMOS ERRORES?** (recurrencia, causas)

### 5. SOLUCIONES T√âCNICAS ESPEC√çFICAS:
- **C√ìDIGO EXACTO** a modificar (archivo, funci√≥n, l√≠nea)
- **CONFIGURACIONES** a cambiar (variables, headers, timeouts)
- **DEPENDENCIAS** a actualizar o instalar
- **FLUJOS DE DATOS** a corregir
- **VALIDACIONES** a implementar
- **ERROR HANDLING** a mejorar
- **LOGGING** a implementar

### 6. PLAN DE IMPLEMENTACI√ìN:
- **ORDEN DE PRIORIDAD** (cr√≠tico, alto, medio, bajo)
- **DEPENDENCIAS** entre soluciones
- **TIEMPO ESTIMADO** para cada fix
- **TESTING** requerido
- **ROLLBACK** plan si algo falla

### 7. PREVENCI√ìN Y MONITOREO:
- **MONITOREO** adicional necesario
- **VALIDACIONES** preventivas
- **ERROR HANDLING** mejorado
- **LOGGING** m√°s detallado
- **ALERTAS** a configurar
- **M√âTRICAS** a monitorear

INSTRUCCIONES CR√çTICAS:
1. DEBES analizar CADA error individualmente
2. DEBES analizar CADA API fallida individualmente  
3. DEBES analizar CADA log cr√≠tico individualmente
4. NO PUEDES responder con mensajes gen√©ricos como "An√°lisis completado"
5. DEBES proporcionar soluciones espec√≠ficas y t√©cnicas
6. DEBES incluir c√≥digo espec√≠fico y nombres de archivos
7. DEBES explicar la causa ra√≠z de cada problema
8. DEBES dar pasos espec√≠ficos para solucionar cada problema

FORMATO DE RESPUESTA REQUERIDO:
## RESUMEN EJECUTIVO:
[An√°lisis general del estado del sistema]

## PROBLEMAS CR√çTICOS IDENTIFICADOS:
[Para cada problema cr√≠tico, especifica: nombre del problema, ubicaci√≥n, causa, impacto, soluci√≥n]

## RECOMENDACIONES ESPEC√çFICAS:
[Para cada recomendaci√≥n, especifica: qu√© hacer, d√≥nde hacerlo, c√≥mo hacerlo, por qu√© es importante]

## INSIGHTS DE RENDIMIENTO:
[An√°lisis espec√≠fico de m√©tricas de rendimiento y optimizaciones]

## PATRONES DE ERRORES DETECTADOS:
[An√°lisis de patrones, correlaciones y causas comunes]

## DETALLES T√âCNICOS:
[Informaci√≥n t√©cnica espec√≠fica sobre el per√≠odo analizado]

Responde en espa√±ol, s√© EXTREMADAMENTE espec√≠fico y t√©cnico. Incluye nombres de archivos, funciones, componentes, y c√≥digo espec√≠fico. El an√°lisis debe ser una gu√≠a t√©cnica completa para solucionar TODOS los problemas identificados.
`;

      console.log('ü§ñ Enviando datos a ChatGPT API...');
      console.log('üìä Datos preparados:', data);

      // Usar la funci√≥n de configuraci√≥n de IA con m√°s tokens para an√°lisis extenso
      const aiResponse = await callOpenAI(prompt, undefined, { max_tokens: 6000, temperature: 0.2 });

      // Parsear la respuesta de la IA
      const analysisResult: AIAnalysisResult = {
        summary: extractSection(aiResponse, 'RESUMEN EJECUTIVO') || 'An√°lisis completado',
        criticalIssues: extractList(aiResponse, 'PROBLEMAS CR√çTICOS'),
        recommendations: extractList(aiResponse, 'RECOMENDACIONES'),
        performanceInsights: extractList(aiResponse, 'INSIGHTS DE RENDIMIENTO'),
        errorPatterns: extractList(aiResponse, 'PATRONES DE ERRORES'),
        generatedAt: new Date().toLocaleString(),
        dataRange: data.timeRange.duration,
        totalItems: data.summary.totalAPIs + data.summary.totalWebSockets + data.summary.totalErrors + data.summary.totalLogs
      };

      setAnalysisResult(analysisResult);
      console.log('‚úÖ An√°lisis completado:', analysisResult);
      console.log('ü§ñ Respuesta completa de la IA:', aiResponse);
      console.log('üìä Resultado parseado:', analysisResult);

    } catch (error) {
      console.error('‚ùå Error en an√°lisis de IA:', error);
      setError(`Error al generar an√°lisis: ${error.message}`);
    } finally {
      setIsAnalyzing(false);
    }
  };

  const extractSection = (text: string, section: string): string => {
    // Buscar la secci√≥n con diferentes variaciones
    const patterns = [
      new RegExp(`${section}[\\s\\S]*?(?=\\n\\d+\\.|\\n[A-Z√Å√â√ç√ì√ö√ë]+:|$)`, 'i'),
      new RegExp(`${section}[\\s\\S]*?(?=\\n##|\\n[A-Z√Å√â√ç√ì√ö√ë]+:|$)`, 'i'),
      new RegExp(`${section}[\\s\\S]*?(?=\\n[A-Z√Å√â√ç√ì√ö√ë]+:|$)`, 'i'),
      new RegExp(`${section}[\\s\\S]*?(?=\\n\\n|$)`, 'i')
    ];
    
    for (const regex of patterns) {
      const match = text.match(regex);
      if (match) {
        return match[0].replace(section, '').trim();
      }
    }
    
    return '';
  };

  const extractList = (text: string, section: string): string[] => {
    const sectionText = extractSection(text, section);
    return sectionText
      .split('\n')
      .map(item => item.replace(/^[-‚Ä¢*]\s*/, '').trim())
      .filter(item => item.length > 0);
  };

  const copyToClipboard = () => {
    if (analysisResult) {
      const text = `
AN√ÅLISIS DE MONITOREO - ${analysisResult.generatedAt}
================================================

RESUMEN EJECUTIVO:
${analysisResult.summary}

PROBLEMAS CR√çTICOS:
${analysisResult.criticalIssues.map(issue => `‚Ä¢ ${issue}`).join('\n')}

RECOMENDACIONES:
${analysisResult.recommendations.map(rec => `‚Ä¢ ${rec}`).join('\n')}

INSIGHTS DE RENDIMIENTO:
${analysisResult.performanceInsights.map(insight => `‚Ä¢ ${insight}`).join('\n')}

PATRONES DE ERRORES:
${analysisResult.errorPatterns.map(pattern => `‚Ä¢ ${pattern}`).join('\n')}

Datos analizados: ${analysisResult.totalItems} elementos en ${analysisResult.dataRange}
      `.trim();

      navigator.clipboard.writeText(text);
      alert('An√°lisis copiado al portapapeles');
    }
  };

  const exportAnalysis = () => {
    if (!analysisResult) return;
    
    const textarea = document.querySelector('.analysis-text') as HTMLTextAreaElement;
    if (!textarea) {
      alert('‚ùå No se encontr√≥ el texto del an√°lisis');
      return;
    }
    
    const analysisText = textarea.value;
    const timestamp = new Date().toISOString().split('T')[0];
    
    // Exportar como TXT
    const txtBlob = new Blob([analysisText], { type: 'text/plain;charset=utf-8' });
    const txtUrl = URL.createObjectURL(txtBlob);
    const txtLink = document.createElement('a');
    txtLink.href = txtUrl;
    txtLink.download = `analisis-ia-${timestamp}.txt`;
    txtLink.style.visibility = 'hidden';
    document.body.appendChild(txtLink);
    txtLink.click();
    document.body.removeChild(txtLink);
    URL.revokeObjectURL(txtUrl);
    
    // Exportar como JSON
    const exportData = {
      summary: analysisResult.summary,
      criticalIssues: analysisResult.criticalIssues,
      recommendations: analysisResult.recommendations,
      performanceInsights: analysisResult.performanceInsights,
      errorPatterns: analysisResult.errorPatterns,
      generatedAt: analysisResult.generatedAt,
      dataRange: analysisResult.dataRange,
      totalItems: analysisResult.totalItems,
      fullAnalysis: analysisText
    };
    
    const jsonBlob = new Blob([JSON.stringify(exportData, null, 2)], { type: 'application/json' });
    const jsonUrl = URL.createObjectURL(jsonBlob);
    const jsonLink = document.createElement('a');
    jsonLink.href = jsonUrl;
    jsonLink.download = `analisis-ia-${timestamp}.json`;
    jsonLink.style.visibility = 'hidden';
    document.body.appendChild(jsonLink);
    jsonLink.click();
    document.body.removeChild(jsonLink);
    URL.revokeObjectURL(jsonUrl);
    
    alert('‚úÖ An√°lisis exportado como TXT y JSON');
  };

  const totalDataItems = apis.length + websockets.length + logs.length + errors.length + performance.length + states.length;

  return (
    <div className="ai-analysis-modal-overlay">
      <div className="ai-analysis-modal">
        <div className="ai-analysis-header">
          <div className="header-content">
            <Brain className="w-6 h-6 text-purple-600" />
            <h2>An√°lisis Inteligente con IA</h2>
          </div>
          <button onClick={onClose} className="close-button">
            <X className="w-5 h-5" />
          </button>
        </div>
        
        {/* Bot√≥n de cerrar flotante siempre visible */}
        <div className="floating-close-button">
          <button onClick={onClose} className="floating-close">
            <X className="w-6 h-6" />
            <span>Cerrar</span>
          </button>
        </div>

        <div className="ai-analysis-body">
          {!analysisResult ? (
            <div className="analysis-setup">
              <div className="setup-content">
                <div className="setup-icon">
                  <Brain className="w-16 h-16 text-purple-500" />
                </div>
                <h3>An√°lisis Completo del Sistema</h3>
                <p className="setup-description">
                  La IA analizar√° todos los datos de monitoreo y generar√° un reporte detallado con:
                </p>
                
                <div className="analysis-features">
                  <div className="feature-item">
                    <CheckCircle className="w-5 h-5 text-green-500" />
                    <span>Identificaci√≥n de problemas cr√≠ticos</span>
                  </div>
                  <div className="feature-item">
                    <CheckCircle className="w-5 h-5 text-green-500" />
                    <span>Recomendaciones espec√≠ficas de soluci√≥n</span>
                  </div>
                  <div className="feature-item">
                    <CheckCircle className="w-5 h-5 text-green-500" />
                    <span>An√°lisis de patrones de errores</span>
                  </div>
                  <div className="feature-item">
                    <CheckCircle className="w-5 h-5 text-green-500" />
                    <span>Insights de rendimiento</span>
                  </div>
                </div>

                <div className="data-summary">
                  <h4>Datos a Analizar:</h4>
                  <div className="data-stats">
                    <div className="stat-item">
                      <span className="stat-label">APIs:</span>
                      <span className="stat-value">{apis.length}</span>
                    </div>
                    <div className="stat-item">
                      <span className="stat-label">WebSockets:</span>
                      <span className="stat-value">{websockets.length}</span>
                    </div>
                    <div className="stat-item">
                      <span className="stat-label">Errores:</span>
                      <span className="stat-value">{errors.length}</span>
                    </div>
                    <div className="stat-item">
                      <span className="stat-label">Logs:</span>
                      <span className="stat-value">{logs.length}</span>
                    </div>
                    <div className="stat-item">
                      <span className="stat-label">Rendimiento:</span>
                      <span className="stat-value">{performance.length}</span>
                    </div>
                    <div className="stat-item">
                      <span className="stat-label">Estados:</span>
                      <span className="stat-value">{states.length}</span>
                    </div>
                  </div>
                  <div className="total-items">
                    <strong>Total: {totalDataItems} elementos</strong>
                  </div>
                </div>

                {error && (
                  <div className="error-message">
                    <AlertTriangle className="w-5 h-5 text-red-500" />
                    <span>{error}</span>
                  </div>
                )}

                <div className="api-key-section">
                  <div className="api-key-info">
                    <Key className="w-4 h-4" />
                    <span>API Key de OpenAI configurada</span>
                  </div>
                  <button
                    onClick={() => {
                      const newKey = prompt('Ingresa tu nueva API Key de OpenAI:');
                      if (newKey && newKey.trim()) {
                        setAPIKey(newKey.trim());
                        alert('API Key actualizada correctamente');
                      }
                    }}
                    className="api-key-button"
                  >
                    Cambiar API Key
                  </button>
                </div>

                {totalDataItems === 0 && (
                  <p className="no-data-warning">
                    ‚ö†Ô∏è No hay datos para analizar. Interact√∫a con la aplicaci√≥n para generar informaci√≥n de monitoreo.
                  </p>
                )}

                {/* Bot√≥n principal siempre visible */}
                <div className="start-analysis-section">
                  <button
                    onClick={generateAIAnalysis}
                    disabled={isAnalyzing}
                    className="start-analysis-button"
                  >
                    {isAnalyzing ? (
                      <>
                        <Loader2 className="w-5 h-5 animate-spin" />
                        Analizando...
                      </>
                    ) : (
                      <>
                        <Brain className="w-5 h-5" />
                        Iniciar An√°lisis con IA
                      </>
                    )}
                  </button>
                </div>

                {/* Bot√≥n de emergencia siempre visible */}
                <div className="emergency-analysis-section">
                  <button
                    onClick={generateAIAnalysis}
                    disabled={isAnalyzing}
                    className="emergency-analysis-button"
                  >
                    {isAnalyzing ? (
                      <>
                        <Loader2 className="w-5 h-5 animate-spin" />
                        Analizando con IA...
                      </>
                    ) : (
                      <>
                        <Brain className="w-5 h-5" />
                        üöÄ GENERAR AN√ÅLISIS AHORA
                      </>
                    )}
                  </button>
                </div>

                {/* Bot√≥n simple de texto */}
                <div className="simple-analysis-section">
                  <button
                    onClick={generateAIAnalysis}
                    disabled={isAnalyzing}
                    className="simple-analysis-button"
                  >
                    {isAnalyzing ? 'Analizando...' : 'HACER AN√ÅLISIS'}
                  </button>
                </div>
              </div>
            </div>
          ) : (
            <div className="analysis-results">
              <div className="results-header">
                <div className="results-info">
                  <h3>An√°lisis Completado</h3>
                  <p className="results-meta">
                    Generado el {analysisResult.generatedAt} ‚Ä¢ {analysisResult.dataRange} ‚Ä¢ {analysisResult.totalItems} elementos analizados
                  </p>
                </div>
                <div className="results-actions">
                  <button onClick={copyToClipboard} className="action-button copy">
                    <Copy className="w-4 h-4" />
                    Copiar Resumen
                  </button>
                  <button onClick={() => {
                    const textarea = document.querySelector('.analysis-text') as HTMLTextAreaElement;
                    if (textarea) {
                      textarea.select();
                      textarea.setSelectionRange(0, 99999); // Para dispositivos m√≥viles
                      try {
                        document.execCommand('copy');
                        alert('‚úÖ An√°lisis completo copiado al portapapeles');
                      } catch (err) {
                        // Fallback para navegadores modernos
                        navigator.clipboard.writeText(textarea.value).then(() => {
                          alert('‚úÖ An√°lisis completo copiado al portapapeles');
                        }).catch(() => {
                          alert('‚ùå Error al copiar. Intenta seleccionar y copiar manualmente.');
                        });
                      }
                    } else {
                      alert('‚ùå No se encontr√≥ el texto del an√°lisis');
                    }
                  }} className="action-button copy-full">
                    <Copy className="w-4 h-4" />
                    Copiar Todo
                  </button>
                  <button onClick={exportAnalysis} className="action-button export">
                    <Download className="w-4 h-4" />
                    Exportar
                  </button>
                  <button onClick={() => setAnalysisResult(null)} className="action-button refresh">
                    <RefreshCw className="w-4 h-4" />
                    Nuevo An√°lisis
                  </button>
                </div>
              </div>

              <div className="analysis-sections">
                <div className="analysis-section">
                  <h4>üìä Resumen Ejecutivo</h4>
                  <div className="section-content">
                    <p>{analysisResult.summary}</p>
                  </div>
                </div>

                <div className="analysis-section">
                  <h4>üö® Problemas Cr√≠ticos</h4>
                  <div className="section-content">
                    <ul>
                      {analysisResult.criticalIssues.map((issue, index) => (
                        <li key={index}>{issue}</li>
                      ))}
                    </ul>
                  </div>
                </div>

                <div className="analysis-section">
                  <h4>üí° Recomendaciones</h4>
                  <div className="section-content">
                    <ul>
                      {analysisResult.recommendations.map((rec, index) => (
                        <li key={index}>{rec}</li>
                      ))}
                    </ul>
                  </div>
                </div>

                <div className="analysis-section">
                  <h4>‚ö° Insights de Rendimiento</h4>
                  <div className="section-content">
                    <ul>
                      {analysisResult.performanceInsights.map((insight, index) => (
                        <li key={index}>{insight}</li>
                      ))}
                    </ul>
                  </div>
                </div>

                <div className="analysis-section">
                  <h4>üîç Patrones de Errores</h4>
                  <div className="section-content">
                    <ul>
                      {analysisResult.errorPatterns.map((pattern, index) => (
                        <li key={index}>{pattern}</li>
                      ))}
                    </ul>
                  </div>
                </div>

                {/* AN√ÅLISIS COMPLETO Y EXTENSO */}
                <div className="analysis-section full-analysis">
                  <h4>üìã An√°lisis Completo y Extenso</h4>
                  <div className="section-content">
                    <div className="full-analysis-content">
                      <textarea 
                        className="analysis-text"
                        readOnly
                        value={`AN√ÅLISIS COMPLETO DEL SISTEMA - ${analysisResult.generatedAt}
========================================================

RESUMEN EJECUTIVO:
${analysisResult.summary}

PROBLEMAS CR√çTICOS IDENTIFICADOS:
${analysisResult.criticalIssues.map((issue, i) => `${i + 1}. ${issue}`).join('\n')}

RECOMENDACIONES ESPEC√çFICAS:
${analysisResult.recommendations.map((rec, i) => `${i + 1}. ${rec}`).join('\n')}

INSIGHTS DE RENDIMIENTO:
${analysisResult.performanceInsights.map((insight, i) => `${i + 1}. ${insight}`).join('\n')}

PATRONES DE ERRORES DETECTADOS:
${analysisResult.errorPatterns.map((pattern, i) => `${i + 1}. ${pattern}`).join('\n')}

DETALLES T√âCNICOS:
- Per√≠odo analizado: ${analysisResult.dataRange}
- Total de elementos procesados: ${analysisResult.totalItems}
- Fecha de generaci√≥n: ${analysisResult.generatedAt}

CONTEXTO ADICIONAL:
Este an√°lisis fue generado por IA bas√°ndose en los datos de monitoreo capturados
en tiempo real del sistema. Incluye an√°lisis de APIs, WebSockets, errores, logs,
m√©tricas de rendimiento y cambios de estado para proporcionar una visi√≥n completa
del estado del sistema y recomendaciones espec√≠ficas para su optimizaci√≥n.

Para aplicar las soluciones recomendadas:
1. Revisa cada problema cr√≠tico identificado
2. Implementa las recomendaciones en el orden de prioridad sugerido
3. Monitorea los cambios con el sistema de monitoreo
4. Genera un nuevo an√°lisis despu√©s de implementar las mejoras

---
Generado por el Sistema de Monitoreo UTalk con IA`}
                      />
                    </div>
                  </div>
                </div>
              </div>
            </div>
          )}
        </div>
      </div>

      <style jsx>{`
        .ai-analysis-modal-overlay {
          position: fixed;
          top: 0;
          left: 0;
          right: 0;
          bottom: 0;
          background: rgba(0, 0, 0, 0.6);
          display: flex;
          align-items: center;
          justify-content: center;
          z-index: 10002;
          padding: 20px;
        }

        .ai-analysis-modal {
          background: white;
          border-radius: 20px;
          box-shadow: 0 25px 50px rgba(0, 0, 0, 0.4);
          max-width: 98vw;
          width: 100%;
          max-height: 98vh;
          overflow: hidden;
          position: relative;
          display: flex;
          flex-direction: column;
        }

        .ai-analysis-header {
          padding: 24px;
          border-bottom: 1px solid #e5e7eb;
          display: flex;
          align-items: center;
          justify-content: space-between;
          background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
          color: white;
          border-radius: 20px 20px 0 0;
        }

        .header-content {
          display: flex;
          align-items: center;
          gap: 12px;
        }

        .header-content h2 {
          margin: 0;
          font-size: 20px;
          font-weight: 600;
        }

        .close-button {
          padding: 8px;
          border: none;
          background: rgba(255, 255, 255, 0.2);
          color: white;
          cursor: pointer;
          border-radius: 8px;
          transition: all 0.2s ease;
        }

        .close-button:hover {
          background: rgba(255, 255, 255, 0.3);
        }

        .floating-close-button {
          position: fixed;
          top: 20px;
          right: 20px;
          z-index: 10003;
        }

        .floating-close {
          background: #ef4444;
          color: white;
          border: none;
          border-radius: 12px;
          padding: 12px 16px;
          display: flex;
          align-items: center;
          gap: 8px;
          font-weight: 600;
          font-size: 14px;
          cursor: pointer;
          box-shadow: 0 4px 12px rgba(239, 68, 68, 0.3);
          transition: all 0.2s ease;
        }

        .floating-close:hover {
          background: #dc2626;
          transform: translateY(-2px);
          box-shadow: 0 6px 16px rgba(239, 68, 68, 0.4);
        }

        .start-analysis-section {
          margin-top: 24px;
          display: flex;
          justify-content: center;
        }

        .start-analysis-button {
          background: linear-gradient(135deg, #8b5cf6, #a855f7);
          color: white;
          border: none;
          border-radius: 12px;
          padding: 16px 32px;
          font-size: 16px;
          font-weight: 600;
          display: flex;
          align-items: center;
          gap: 12px;
          cursor: pointer;
          transition: all 0.3s ease;
          box-shadow: 0 4px 12px rgba(139, 92, 246, 0.3);
        }

        .start-analysis-button:hover:not(:disabled) {
          background: linear-gradient(135deg, #7c3aed, #9333ea);
          transform: translateY(-2px);
          box-shadow: 0 6px 16px rgba(139, 92, 246, 0.4);
        }

        .start-analysis-button:disabled {
          background: #9ca3af;
          cursor: not-allowed;
          transform: none;
          box-shadow: none;
        }

        .emergency-analysis-section {
          margin-top: 16px;
          display: flex;
          justify-content: center;
        }

        .emergency-analysis-button {
          background: linear-gradient(135deg, #ef4444, #dc2626);
          color: white;
          border: none;
          border-radius: 16px;
          padding: 20px 40px;
          font-size: 18px;
          font-weight: 700;
          display: flex;
          align-items: center;
          gap: 12px;
          cursor: pointer;
          transition: all 0.3s ease;
          box-shadow: 0 6px 20px rgba(239, 68, 68, 0.4);
          text-transform: uppercase;
          letter-spacing: 1px;
        }

        .emergency-analysis-button:hover:not(:disabled) {
          background: linear-gradient(135deg, #dc2626, #b91c1c);
          transform: translateY(-3px);
          box-shadow: 0 8px 25px rgba(239, 68, 68, 0.5);
        }

        .emergency-analysis-button:disabled {
          background: #9ca3af;
          cursor: not-allowed;
          transform: none;
          box-shadow: none;
        }

        .simple-analysis-section {
          margin-top: 16px;
          display: flex;
          justify-content: center;
        }

        .simple-analysis-button {
          background: #10b981;
          color: white;
          border: none;
          border-radius: 8px;
          padding: 12px 24px;
          font-size: 16px;
          font-weight: 600;
          cursor: pointer;
          transition: all 0.2s ease;
        }

        .simple-analysis-button:hover:not(:disabled) {
          background: #059669;
        }

        .simple-analysis-button:disabled {
          background: #9ca3af;
          cursor: not-allowed;
        }

        .ai-analysis-body {
          padding: 24px;
          flex: 1;
          overflow-y: auto;
          display: flex;
          flex-direction: column;
        }

        .analysis-setup {
          text-align: center;
        }

        .setup-content {
          max-width: 600px;
          margin: 0 auto;
        }

        .setup-icon {
          margin-bottom: 24px;
        }

        .setup-content h3 {
          margin: 0 0 16px 0;
          font-size: 24px;
          font-weight: 600;
          color: #1f2937;
        }

        .setup-description {
          margin: 0 0 32px 0;
          color: #6b7280;
          font-size: 16px;
          line-height: 1.6;
        }

        .analysis-features {
          display: grid;
          grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
          gap: 16px;
          margin-bottom: 32px;
        }

        .feature-item {
          display: flex;
          align-items: center;
          gap: 12px;
          padding: 16px;
          background: #f8fafc;
          border-radius: 12px;
          border: 1px solid #e5e7eb;
        }

        .feature-item span {
          font-weight: 500;
          color: #1f2937;
        }

        .data-summary {
          background: #f8fafc;
          border: 1px solid #e5e7eb;
          border-radius: 12px;
          padding: 20px;
          margin-bottom: 32px;
        }

        .data-summary h4 {
          margin: 0 0 16px 0;
          font-size: 16px;
          font-weight: 600;
          color: #1f2937;
        }

        .data-stats {
          display: grid;
          grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
          gap: 12px;
          margin-bottom: 16px;
        }

        .stat-item {
          display: flex;
          justify-content: space-between;
          align-items: center;
          padding: 8px 12px;
          background: white;
          border-radius: 8px;
          border: 1px solid #e5e7eb;
        }

        .stat-label {
          color: #6b7280;
          font-size: 14px;
        }

        .stat-value {
          font-weight: 600;
          color: #1f2937;
          font-size: 14px;
        }

        .total-items {
          text-align: center;
          padding-top: 16px;
          border-top: 1px solid #e5e7eb;
          color: #1f2937;
        }

        .error-message {
          display: flex;
          align-items: center;
          gap: 8px;
          padding: 12px;
          background: #fef2f2;
          border: 1px solid #fecaca;
          border-radius: 8px;
          color: #dc2626;
          margin-bottom: 24px;
        }

        .analyze-button {
          display: flex;
          align-items: center;
          gap: 12px;
          padding: 16px 32px;
          background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
          color: white;
          border: none;
          border-radius: 12px;
          font-size: 16px;
          font-weight: 600;
          cursor: pointer;
          transition: all 0.2s ease;
          margin: 0 auto;
        }

        .analyze-button:hover:not(:disabled) {
          transform: translateY(-2px);
          box-shadow: 0 8px 25px rgba(102, 126, 234, 0.3);
        }

        .analyze-button:disabled {
          opacity: 0.6;
          cursor: not-allowed;
          transform: none;
        }

        .no-data-warning {
          margin-top: 16px;
          padding: 12px;
          background: #fef3c7;
          border: 1px solid #fde68a;
          border-radius: 8px;
          color: #92400e;
          font-size: 14px;
        }

        .api-key-section {
          display: flex;
          align-items: center;
          justify-content: space-between;
          padding: 12px 16px;
          background: #f0f9ff;
          border: 1px solid #bae6fd;
          border-radius: 8px;
          margin-bottom: 24px;
        }

        .api-key-info {
          display: flex;
          align-items: center;
          gap: 8px;
          color: #0369a1;
          font-size: 14px;
          font-weight: 500;
        }

        .api-key-button {
          padding: 6px 12px;
          background: #0ea5e9;
          color: white;
          border: none;
          border-radius: 6px;
          font-size: 12px;
          font-weight: 500;
          cursor: pointer;
          transition: all 0.2s ease;
        }

        .api-key-button:hover {
          background: #0284c7;
        }

        .analysis-results {
          max-width: 100%;
          flex: 1;
          display: flex;
          flex-direction: column;
          overflow: hidden;
        }

        .results-header {
          display: flex;
          justify-content: space-between;
          align-items: flex-start;
          margin-bottom: 32px;
          padding-bottom: 20px;
          border-bottom: 1px solid #e5e7eb;
        }

        .results-info h3 {
          margin: 0 0 8px 0;
          font-size: 20px;
          font-weight: 600;
          color: #1f2937;
        }

        .results-meta {
          margin: 0;
          color: #6b7280;
          font-size: 14px;
        }

        .results-actions {
          display: flex;
          gap: 8px;
        }

        .action-button {
          display: flex;
          align-items: center;
          gap: 6px;
          padding: 8px 12px;
          border: 1px solid #d1d5db;
          border-radius: 8px;
          background: white;
          color: #374151;
          cursor: pointer;
          font-size: 14px;
          font-weight: 500;
          transition: all 0.2s ease;
        }

        .action-button:hover {
          background: #f9fafb;
          border-color: #9ca3af;
        }

        .action-button.copy:hover {
          border-color: #3b82f6;
          color: #3b82f6;
        }

        .action-button.copy-full:hover {
          border-color: #8b5cf6;
          color: #8b5cf6;
        }

        .action-button.export:hover {
          border-color: #10b981;
          color: #10b981;
        }

        .action-button.refresh:hover {
          border-color: #f59e0b;
          color: #f59e0b;
        }

        .analysis-sections {
          display: flex;
          flex-direction: column;
          gap: 24px;
          flex: 1;
          overflow-y: auto;
          padding-right: 8px;
        }

        .analysis-section {
          background: #f8fafc;
          border: 1px solid #e5e7eb;
          border-radius: 12px;
          padding: 20px;
        }

        .analysis-section h4 {
          margin: 0 0 16px 0;
          font-size: 16px;
          font-weight: 600;
          color: #1f2937;
        }

        .section-content {
          color: #374151;
          line-height: 1.6;
        }

        .section-content p {
          margin: 0;
        }

        .section-content ul {
          margin: 0;
          padding-left: 20px;
        }

        .section-content li {
          margin-bottom: 8px;
        }

        .full-analysis {
          background: #f8fafc;
          border: 2px solid #e2e8f0;
          border-radius: 12px;
          padding: 24px;
          margin-top: 24px;
        }

        .full-analysis h4 {
          color: #1e40af;
          font-size: 18px;
          margin-bottom: 20px;
          border-bottom: 2px solid #e2e8f0;
          padding-bottom: 12px;
        }

        .full-analysis-content {
          background: white;
          border: 1px solid #d1d5db;
          border-radius: 8px;
          padding: 20px;
          overflow-x: auto;
        }

        .analysis-text {
          font-family: 'Monaco', 'Menlo', 'Consolas', monospace;
          font-size: 13px;
          line-height: 1.6;
          color: #1f2937;
          margin: 0;
          background: #f9fafb;
          padding: 16px;
          border-radius: 6px;
          border: 1px solid #e5e7eb;
          height: 400px;
          width: 100%;
          resize: vertical;
          overflow-y: auto;
          box-sizing: border-box;
        }

        .analysis-text::-webkit-scrollbar {
          width: 8px;
        }

        .analysis-text::-webkit-scrollbar-track {
          background: #f1f5f9;
          border-radius: 4px;
        }

        .analysis-text::-webkit-scrollbar-thumb {
          background: #cbd5e1;
          border-radius: 4px;
        }

        .analysis-text::-webkit-scrollbar-thumb:hover {
          background: #94a3b8;
        }

        @media (max-width: 1024px) {
          .ai-analysis-modal {
            max-width: 95vw;
            max-height: 95vh;
            margin: 10px;
          }
          
          .analysis-text {
            height: 300px;
            font-size: 12px;
          }
        }

        @media (max-width: 640px) {
          .ai-analysis-modal {
            margin: 5px;
            max-width: 98vw;
            max-height: 98vh;
            border-radius: 12px;
          }
          
          .ai-analysis-header {
            padding: 16px;
          }
          
          .ai-analysis-body {
            padding: 16px;
          }
          
          .results-header {
            flex-direction: column;
            gap: 16px;
          }
          
          .results-actions {
            width: 100%;
            justify-content: center;
          }
          
          .analysis-text {
            height: 250px;
            font-size: 11px;
            padding: 12px;
          }
          
          .start-analysis-button,
          .emergency-analysis-button {
            padding: 12px 20px;
            font-size: 14px;
          }
          
          .analysis-features {
            grid-template-columns: 1fr;
          }
          
          .data-stats {
            grid-template-columns: repeat(2, 1fr);
          }
        }
      `}</style>
    </div>
  );
};
