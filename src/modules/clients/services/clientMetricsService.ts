import type { ClientMetrics } from '../../../types/client';
import { api } from '../../../config/api';
import { infoLog } from '../../../config/logger';

// Interface para respuestas del backend
interface BackendMetricsResponse {
  success: boolean;
  data: ClientMetrics;
  message: string;
}

export const clientMetricsService = {
  // ‚úÖ M√âTRICAS GENERALES - API REAL
  async getClientMetrics(): Promise<ClientMetrics> {
    try {
      infoLog('Obteniendo m√©tricas de clientes desde API');
      
      const response = await api.get<BackendMetricsResponse>('/api/clients/metrics');
      
      if (!response.data.success) {
        throw new Error(response.data.message || 'Error al obtener m√©tricas');
      }
      
      infoLog('M√©tricas de clientes obtenidas exitosamente');
      
      return response.data.data;
    } catch (error) {
      infoLog('Error al obtener m√©tricas de clientes', { error });
      throw error;
    }
  },

  // üîÆ FUNCIONALIDADES FUTURAS - M√©tricas espec√≠ficas (ya incluidas en getClientMetrics)
  
  // ‚úÖ M√âTRICAS POR ETAPA - API REAL
  async getStageMetrics(): Promise<ClientMetrics['stageMetrics']> {
    try {
      infoLog('Obteniendo m√©tricas por etapa desde API');
      
      const response = await api.get<{ success: boolean; data: ClientMetrics['stageMetrics'] }>('/api/clients/metrics/stages');
      
      if (!response.data.success) {
        throw new Error('Error al obtener m√©tricas por etapa');
      }
      
      return response.data.data;
    } catch (error) {
      infoLog('Error al obtener m√©tricas por etapa', { error });
      throw error;
    }
  },

  // ‚úÖ M√âTRICAS POR AGENTE - API REAL
  async getAgentMetrics(): Promise<ClientMetrics['agentMetrics']> {
    try {
      infoLog('Obteniendo m√©tricas por agente desde API');
      
      const response = await api.get<{ success: boolean; data: ClientMetrics['agentMetrics'] }>('/api/clients/metrics/agents');
      
      if (!response.data.success) {
        throw new Error('Error al obtener m√©tricas por agente');
      }
      
      return response.data.data;
    } catch (error) {
      infoLog('Error al obtener m√©tricas por agente', { error });
      throw error;
    }
  },

  // ‚úÖ M√âTRICAS POR FUENTE - API REAL
  async getSourceMetrics(): Promise<ClientMetrics['sourceMetrics']> {
    try {
      infoLog('Obteniendo m√©tricas por fuente desde API');
      
      const response = await api.get<{ success: boolean; data: ClientMetrics['sourceMetrics'] }>('/api/clients/metrics/sources');
      
      if (!response.data.success) {
        throw new Error('Error al obtener m√©tricas por fuente');
      }
      
      return response.data.data;
    } catch (error) {
      infoLog('Error al obtener m√©tricas por fuente', { error });
      throw error;
    }
  },

  // ‚úÖ M√âTRICAS POR SEGMENTO - API REAL
  async getSegmentMetrics(): Promise<ClientMetrics['segmentMetrics']> {
    try {
      infoLog('Obteniendo m√©tricas por segmento desde API');
      
      const response = await api.get<{ success: boolean; data: ClientMetrics['segmentMetrics'] }>('/api/clients/metrics/segments');
      
      if (!response.data.success) {
        throw new Error('Error al obtener m√©tricas por segmento');
      }
      
      return response.data.data;
    } catch (error) {
      infoLog('Error al obtener m√©tricas por segmento', { error });
      throw error;
    }
  }
}; 