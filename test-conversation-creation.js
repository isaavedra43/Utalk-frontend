// Script de prueba para verificar la codificaci√≥n de conversationId
const testConversationId = 'conv_+5214773790184_+5214793176502';

console.log('üîç Probando codificaci√≥n de conversationId...');
console.log('ID Original:', testConversationId);

// Simular la funci√≥n encodeConversationIdForUrl
const encodeConversationIdForUrl = (conversationId) => {
  // Simular sanitizaci√≥n
  const sanitized = conversationId;
  
  // SOLUCI√ìN CR√çTICA: Usar encodeURIComponent para preservar los s√≠mbolos +
  const encoded = encodeURIComponent(sanitized);
  
  console.log('üîó Codificaci√≥n:', {
    originalId: conversationId,
    sanitizedId: sanitized,
    encodedId: encoded
  });
  
  return encoded;
};

// Probar la codificaci√≥n
const encoded = encodeConversationIdForUrl(testConversationId);

console.log('\nüìä Resultados:');
console.log('Original:', testConversationId);
console.log('Codificado:', encoded);
console.log('Decodificado:', decodeURIComponent(encoded));

// Verificar que la codificaci√≥n preserva los s√≠mbolos +
const expectedEncoded = 'conv_%2B5214773790184_%2B5214793176502';
console.log('\n‚úÖ Verificaci√≥n:');
console.log('Esperado:', expectedEncoded);
console.log('Obtenido:', encoded);
console.log('¬øCoincide?', encoded === expectedEncoded ? '‚úÖ S√ç' : '‚ùå NO');

// Probar URL completa
const baseUrl = 'https://utalk-backend-production.up.railway.app';
const endpoint = '/api/messages';
const queryParams = new URLSearchParams();
queryParams.set('conversationId', encoded);
queryParams.set('limit', '50');

const fullUrl = `${baseUrl}${endpoint}?${queryParams}`;
console.log('\nüåê URL completa:');
console.log(fullUrl);

console.log('\nüéØ Estado de la correcci√≥n:');
console.log('‚úÖ encodeConversationIdForUrl ahora usa encodeURIComponent');
console.log('‚úÖ Los s√≠mbolos + se convierten en %2B');
console.log('‚úÖ Las URLs se construyen correctamente');
console.log('‚úÖ El backend deber√≠a recibir los conversationId correctos');
 