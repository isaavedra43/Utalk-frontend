# Test de Carga Básico
# Simula 500 usuarios concurrentes durante 5 minutos

config:
  target: 'http://localhost:3000'
  phases:
    # Calentamiento
    - duration: 60
      arrivalRate: 10
      name: "Calentamiento"
    
    # Carga normal
    - duration: 180
      arrivalRate: 50
      name: "Carga normal"
    
    # Pico de carga
    - duration: 120
      arrivalRate: 100
      name: "Pico de carga"
    
    # Enfriamiento
    - duration: 60
      arrivalRate: 10
      name: "Enfriamiento"

  # Variables globales
  variables:
    adminToken: ""
    userToken: ""

  # Configuración de timeouts
  timeout: 30

  # Métricas personalizadas
  statsInterval: 10

scenarios:
  # Escenario 1: Health checks (40% del tráfico)
  - name: "Health Checks"
    weight: 40
    flow:
      - get:
          url: "/health"
          expect:
            - statusCode: 200
            - contentType: json
      
      - get:
          url: "/api/channels/twilio/health"
          expect:
            - statusCode: 200

  # Escenario 2: Autenticación (30% del tráfico)
  - name: "Autenticación"
    weight: 30
    flow:
      # Login con credenciales válidas
      - post:
          url: "/api/users/auth/login"
          headers:
            Content-Type: "application/json"
          json:
            identifier: "admin"
            password: "Admin123!@#"
          capture:
            - json: "$.data.accessToken"
              as: "accessToken"
          expect:
            - statusCode: 200
      
      # Obtener perfil
      - get:
          url: "/api/users/me"
          headers:
            Authorization: "Bearer {{ accessToken }}"
          expect:
            - statusCode: 200
      
      # Logout
      - post:
          url: "/api/users/auth/logout"
          headers:
            Authorization: "Bearer {{ accessToken }}"
          expect:
            - statusCode: 200

  # Escenario 3: Mensajería (20% del tráfico)
  - name: "Mensajería"
    weight: 20
    flow:
      # Login primero
      - post:
          url: "/api/users/auth/login"
          headers:
            Content-Type: "application/json"
          json:
            identifier: "admin"
            password: "Admin123!@#"
          capture:
            - json: "$.data.accessToken"
              as: "accessToken"
      
      # Enviar mensaje WhatsApp
      - post:
          url: "/api/channels/twilio/send/whatsapp"
          headers:
            Authorization: "Bearer {{ accessToken }}"
            Content-Type: "application/json"
          json:
            to: "+1234567890"
            message: "Mensaje de prueba de carga {{ $randomString() }}"
          expect:
            - statusCode: [200, 429] # Aceptar rate limiting

  # Escenario 4: Health checks avanzados (10% del tráfico)
  - name: "Health Checks Avanzados"
    weight: 10
    flow:
      # Login como admin
      - post:
          url: "/api/users/auth/login"
          headers:
            Content-Type: "application/json"
          json:
            identifier: "admin"
            password: "Admin123!@#"
          capture:
            - json: "$.data.accessToken"
              as: "accessToken"
      
      # Health check detallado
      - get:
          url: "/api/health/detailed"
          headers:
            Authorization: "Bearer {{ accessToken }}"
          expect:
            - statusCode: [200, 503]
      
      # Métricas del sistema
      - get:
          url: "/api/health/metrics"
          headers:
            Authorization: "Bearer {{ accessToken }}"
          expect:
            - statusCode: [200, 500]

# Configuración de reportes
reporting:
  - type: json
    output: "./tests/load/reports/basic-load-report.json"
  
  - type: html
    output: "./tests/load/reports/basic-load-report.html" 