name: 🚀 CI/CD Pipeline - UTalk Frontend

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  CACHE_KEY: node-modules-${{ hashFiles('**/package-lock.json') }}

jobs:
  # ===== ANÁLISIS DE CALIDAD =====
  quality:
    name: 🔍 Code Quality Analysis
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: ⚡ Install dependencies
        run: npm ci
        
      - name: 🧹 Run ESLint
        run: npm run lint
        
      - name: 🔍 TypeScript Check
        run: npx tsc --noEmit
        
      - name: 📊 Check Bundle Size
        run: npm run build

  # ===== TESTS =====
  test:
    name: 🧪 Run Tests
    runs-on: ubuntu-latest
    needs: quality
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: ⚡ Install dependencies
        run: npm ci
        
      - name: 🧪 Run unit tests
        run: npm test -- --coverage --watchAll=false
        continue-on-error: true
        
      - name: 📊 Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        if: success()
        with:
          file: ./coverage/lcov.info
          flags: frontend
          name: codecov-umbrella

  # ===== BUILD Y DEPLOY =====
  build:
    name: 🏗️ Build & Deploy
    runs-on: ubuntu-latest
    needs: [quality, test]
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: ⚡ Install dependencies
        run: npm ci
        
      - name: 🏗️ Build production
        run: npm run build
        env:
          VITE_API_URL: ${{ secrets.VITE_API_URL }}
          VITE_WS_URL: ${{ secrets.VITE_WS_URL }}
          VITE_ENV: production
          
      - name: 📊 Analyze bundle size
        run: |
          npm install -g bundle-analyzer
          echo "📦 Bundle Analysis:" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          du -sh dist/* >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          
      - name: 🚀 Deploy to Vercel (Production)
        if: github.ref == 'refs/heads/main'
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'
          
      - name: 🚀 Deploy to Vercel (Preview)
        if: github.ref != 'refs/heads/main'
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}

  # ===== SECURITY SCAN =====
  security:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: 🔒 Run security audit
        run: npm audit --audit-level moderate
        continue-on-error: true
        
      - name: 🔍 Run Snyk security scan
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

  # ===== NOTIFICACIONES =====
  notify:
    name: 📢 Notifications
    runs-on: ubuntu-latest
    needs: [quality, test, build, security]
    if: always()
    
    steps:
      - name: 📢 Notify success
        if: needs.build.result == 'success'
        run: |
          echo "✅ Pipeline completed successfully!"
          echo "🚀 Build: ${{ needs.build.result }}"
          echo "🧪 Tests: ${{ needs.test.result }}"
          echo "🔍 Quality: ${{ needs.quality.result }}"
          
      - name: 📢 Notify failure
        if: needs.build.result == 'failure' || needs.quality.result == 'failure'
        run: |
          echo "❌ Pipeline failed!"
          echo "🚀 Build: ${{ needs.build.result }}"
          echo "🧪 Tests: ${{ needs.test.result }}"
          echo "🔍 Quality: ${{ needs.quality.result }}" 